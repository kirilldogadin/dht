package global.unet.monitoring.server;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 * Класс для хранения метрик узла
 */
class NodeMetrics {
    private final String nodeId;
    private final long timestamp;
    private final String rawMetrics;
    private final Map<String, Double> parsedMetrics;
    
    public NodeMetrics(String nodeId, long timestamp, String rawMetrics) {
        this.nodeId = nodeId;
        this.timestamp = timestamp;
        this.rawMetrics = rawMetrics;
        this.parsedMetrics = parsePrometheusMetrics(rawMetrics);
    }
    
    /**
     * Парсинг метрик в формате Prometheus
     */
    private Map<String, Double> parsePrometheusMetrics(String metrics) {
        Map<String, Double> parsed = new HashMap<>();
        
        if (metrics == null || metrics.isEmpty()) {
            return parsed;
        }
        
        String[] lines = metrics.split("\\n");
        for (String line : lines) {
            line = line.trim();
            
            // Пропускаем комментарии и пустые строки
            if (line.startsWith("#") || line.isEmpty()) {
                continue;
            }
            
            // Парсим строку метрики: metric_name{labels} value [timestamp]
            try {
                int spaceIndex = line.lastIndexOf(' ');
                if (spaceIndex > 0) {
                    String metricPart = line.substring(0, spaceIndex);
                    String valuePart = line.substring(spaceIndex + 1);
                    
                    // Проверяем, есть ли временная метка
                    String[] valueParts = valuePart.split(" ");
                    double value = Double.parseDouble(valueParts[0]);
                    
                    // Извлекаем имя метрики (без меток)
                    String metricName = extractMetricName(metricPart);
                    
                    parsed.put(metricName, value);
                }
            } catch (NumberFormatException e) {
                // Игнорируем строки с некорректными значениями
            }
        }
        
        return parsed;
    }
    
    /**
     * Извлечение имени метрики без меток
     */
    private String extractMetricName(String metricPart) {
        int braceIndex = metricPart.indexOf('{');
        if (braceIndex > 0) {
            return metricPart.substring(0, braceIndex);
        }
        return metricPart;
    }
    
    // Геттеры
    
    public String getNodeId() {
        return nodeId;
    }
    
    public long getTimestamp() {
        return timestamp;
    }
    
    public String getRawMetrics() {
        return rawMetrics;
    }
    
    public Map<String, Double> getParsedMetrics() {
        return new HashMap<>(parsedMetrics);
    }
    
    public Double getMetricValue(String metricName) {
        return parsedMetrics.get(metricName);
    }
    
    public boolean hasMetric(String metricName) {
        return parsedMetrics.containsKey(metricName);
    }
    
    /**
     * Преобразование в Map для JSON сериализации
     */
    public Map<String, Object> toMap() {
        Map<String, Object> map = new HashMap<>();
        map.put("node_id", nodeId);
        map.put("timestamp", timestamp);
        map.put("metrics", parsedMetrics);
        map.put("metrics_count", parsedMetrics.size());
        return map;
    }
    
    @Override
    public String toString() {
        return String.format("NodeMetrics{nodeId='%s', timestamp=%d, metricsCount=%d}",
            nodeId, timestamp, parsedMetrics.size());
    }
}

/**
 * Хранилище метрик для сервера мониторинга
 */
class MetricsStorage {
    private final Map<String, List<NodeMetrics>> nodeMetricsHistory = new ConcurrentHashMap<>();
    private final Map<String, NodeMetrics> latestMetrics = new ConcurrentHashMap<>();
    private final long serverStartTime = System.currentTimeMillis();
    private volatile long totalMetricsCount = 0;
    
    // Настройки хранения
    private static final int MAX_HISTORY_SIZE = 1000; // Максимум записей в истории для одного узла
    private static final long MAX_HISTORY_AGE = 24 * 60 * 60 * 1000; // 24 часа
    
    /**
     * Сохранение метрик узла
     */
    public void storeMetrics(NodeMetrics metrics) {
        String nodeId = metrics.getNodeId();
        
        // Обновляем последние метрики
        latestMetrics.put(nodeId, metrics);
        
        // Добавляем в историю
        nodeMetricsHistory.computeIfAbsent(nodeId, k -> new CopyOnWriteArrayList<>())
                         .add(metrics);
        
        // Очищаем старые записи
        cleanupOldMetrics(nodeId);
        
        totalMetricsCount++;
    }
    
    /**
     * Получение последних метрик узла
     */
    public NodeMetrics getLatestMetrics(String nodeId) {
        return latestMetrics.get(nodeId);
    }
    
    /**
     * Получение всех идентификаторов узлов
     */
    public List<String> getAllNodeIds() {
        return new ArrayList<>(latestMetrics.keySet());
    }
    
    /**
     * Получение истории метрик
     */
    public List<Map<String, Object>> getMetricsHistory(String nodeId, String metricName, long fromTime, long toTime) {
        List<Map<String, Object>> history = new ArrayList<>();
        
        List<NodeMetrics> nodeHistory = nodeMetricsHistory.get(nodeId);
        if (nodeHistory == null) {
            return history;
        }
        
        for (NodeMetrics metrics : nodeHistory) {
            if (metrics.getTimestamp() >= fromTime && metrics.getTimestamp() <= toTime) {
                if (metricName == null || metrics.hasMetric(metricName)) {
                    Map<String, Object> entry = new HashMap<>();
                    entry.put("timestamp", metrics.getTimestamp());
                    
                    if (metricName != null) {
                        entry.put("value", metrics.getMetricValue(metricName));
                    } else {
                        entry.put("metrics", metrics.getParsedMetrics());
                    }
                    
                    history.add(entry);
                }
            }
        }
        
        return history;
    }
    
    /**
     * Получение агрегированных метрик по всем узлам
     */
    public Map<String, Object> getAggregatedMetrics() {
        Map<String, Object> aggregated = new HashMap<>();
        
        // Собираем все уникальные имена метрик
        Set<String> allMetricNames = new HashSet<>();
        for (NodeMetrics metrics : latestMetrics.values()) {
            allMetricNames.addAll(metrics.getParsedMetrics().keySet());
        }
        
        // Агрегируем каждую метрику
        Map<String, Map<String, Double>> metricStats = new HashMap<>();
        
        for (String metricName : allMetricNames) {
            List<Double> values = new ArrayList<>();
            
            for (NodeMetrics metrics : latestMetrics.values()) {
                Double value = metrics.getMetricValue(metricName);
                if (value != null) {
                    values.add(value);
                }
            }
            
            if (!values.isEmpty()) {
                Map<String, Double> stats = calculateStats(values);
                metricStats.put(metricName, stats);
            }
        }
        
        aggregated.put("metrics", metricStats);
        aggregated.put("total_nodes", latestMetrics.size());
        aggregated.put("timestamp", System.currentTimeMillis());
        
        return aggregated;
    }
    
    /**
     * Расчет статистики для списка значений
     */
    private Map<String, Double> calculateStats(List<Double> values) {
        Map<String, Double> stats = new HashMap<>();
        
        if (values.isEmpty()) {
            return stats;
        }
        
        // Сортируем для расчета медианы и перцентилей
        List<Double> sorted = new ArrayList<>(values);
        Collections.sort(sorted);
        
        // Основная статистика
        double sum = values.stream().mapToDouble(Double::doubleValue).sum();
        double mean = sum / values.size();
        double min = sorted.get(0);
        double max = sorted.get(sorted.size() - 1);
        
        stats.put("count", (double) values.size());
        stats.put("sum", sum);
        stats.put("mean", mean);
        stats.put("min", min);
        stats.put("max", max);
        
        // Медиана
        double median;
        int size = sorted.size();
        if (size % 2 == 0) {
            median = (sorted.get(size / 2 - 1) + sorted.get(size / 2)) / 2.0;
        } else {
            median = sorted.get(size / 2);
        }
        stats.put("median", median);
        
        // Перцентили
        stats.put("p95", getPercentile(sorted, 0.95));
        stats.put("p99", getPercentile(sorted, 0.99));
        
        return stats;
    }
    
    /**
     * Расчет перцентиля
     */
    private double getPercentile(List<Double> sorted, double percentile) {
        if (sorted.isEmpty()) {
            return 0.0;
        }
        
        int index = (int) Math.ceil(percentile * sorted.size()) - 1;
        index = Math.max(0, Math.min(index, sorted.size() - 1));
        
        return sorted.get(index);
    }
    
    /**
     * Получение статистики по типам метрик
     */
    public Map<String, Integer> getMetricsByType() {
        Map<String, Integer> typeStats = new HashMap<>();
        
        for (NodeMetrics metrics : latestMetrics.values()) {
            for (String metricName : metrics.getParsedMetrics().keySet()) {
                String type = getMetricType(metricName);
                typeStats.merge(type, 1, Integer::sum);
            }
        }
        
        return typeStats;
    }
    
    /**
     * Определение типа метрики по имени
     */
    private String getMetricType(String metricName) {
        if (metricName.contains("_total") || metricName.contains("_count")) {
            return "counter";
        } else if (metricName.contains("_bucket") || metricName.contains("_sum")) {
            return "histogram";
        } else {
            return "gauge";
        }
    }
    
    /**
     * Получение среднего времени отклика
     */
    public double getAverageResponseTime() {
        List<Double> responseTimes = new ArrayList<>();
        
        for (NodeMetrics metrics : latestMetrics.values()) {
            Double responseTime = metrics.getMetricValue("dht_rpc_response_time_ms");
            if (responseTime != null) {
                responseTimes.add(responseTime);
            }
        }
        
        if (responseTimes.isEmpty()) {
            return 0.0;
        }
        
        return responseTimes.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);
    }
    
    /**
     * Получение общего процента успешности
     */
    public double getOverallSuccessRate() {
        List<Double> successRates = new ArrayList<>();
        
        for (NodeMetrics metrics : latestMetrics.values()) {
            Double successRate = metrics.getMetricValue("dht_rpc_success_rate_percent");
            if (successRate != null) {
                successRates.add(successRate);
            }
        }
        
        if (successRates.isEmpty()) {
            return 100.0;
        }
        
        return successRates.stream().mapToDouble(Double::doubleValue).average().orElse(100.0);
    }
    
    /**
     * Очистка старых метрик
     */
    private void cleanupOldMetrics(String nodeId) {
        List<NodeMetrics> history = nodeMetricsHistory.get(nodeId);
        if (history == null) {
            return;
        }
        
        long cutoffTime = System.currentTimeMillis() - MAX_HISTORY_AGE;
        
        // Удаляем старые записи
        history.removeIf(metrics -> metrics.getTimestamp() < cutoffTime);
        
        // Ограничиваем размер истории
        while (history.size() > MAX_HISTORY_SIZE) {
            history.remove(0);
        }
    }
    
    // Геттеры
    
    public long getServerStartTime() {
        return serverStartTime;
    }
    
    public long getTotalMetricsCount() {
        return totalMetricsCount;
    }
    
    public int getActiveNodesCount() {
        return latestMetrics.size();
    }
}

