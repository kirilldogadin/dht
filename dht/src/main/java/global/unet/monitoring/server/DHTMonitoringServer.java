package global.unet.monitoring.server;

import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;

import java.io.*;
import java.net.InetSocketAddress;
import java.util.*;
import java.util.concurrent.*;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.nio.charset.StandardCharsets;

/**
 * Централизованный сервер мониторинга DHT сети
 */
public class DHTMonitoringServer {
    private static final Logger logger = Logger.getLogger(DHTMonitoringServer.class.getName());
    
    private final int port;
    private final HttpServer server;
    private final ExecutorService executor;
    private final MetricsStorage storage;
    private final NetworkTopologyTracker topologyTracker;
    
    private volatile boolean running = false;
    
    /**
     * Конструктор сервера мониторинга
     */
    public DHTMonitoringServer(int port) throws IOException {
        this.port = port;
        this.server = HttpServer.create(new InetSocketAddress(port), 0);
        this.executor = Executors.newFixedThreadPool(10);
        this.storage = new MetricsStorage();
        this.topologyTracker = new NetworkTopologyTracker();
        
        setupRoutes();
        server.setExecutor(executor);
        
        logger.info("DHT Monitoring Server initialized on port " + port);
    }
    
    /**
     * Настройка маршрутов API
     */
    private void setupRoutes() {
        // API для приема метрик
        server.createContext("/api/metrics", new MetricsHandler());
        
        // API для получения метрик узла
        server.createContext("/api/nodes", new NodesHandler());
        
        // API для получения топологии сети
        server.createContext("/api/topology", new TopologyHandler());
        
        // API для получения агрегированных метрик
        server.createContext("/api/aggregated", new AggregatedMetricsHandler());
        
        // API для получения статистики сети
        server.createContext("/api/stats", new NetworkStatsHandler());
        
        // API для получения истории метрик
        server.createContext("/api/history", new HistoryHandler());
        
        // Статические файлы (для веб-интерфейса)
        server.createContext("/", new StaticFileHandler());
        
        // Health check
        server.createContext("/health", new HealthHandler());
    }
    
    /**
     * Запуск сервера
     */
    public void start() {
        if (running) {
            logger.warning("Server is already running");
            return;
        }
        
        server.start();
        running = true;
        
        logger.info("DHT Monitoring Server started on port " + port);
        logger.info("Available endpoints:");
        logger.info("  POST /api/metrics - Accept metrics from DHT nodes");
        logger.info("  GET  /api/nodes - Get list of monitored nodes");
        logger.info("  GET  /api/topology - Get network topology");
        logger.info("  GET  /api/aggregated - Get aggregated metrics");
        logger.info("  GET  /api/stats - Get network statistics");
        logger.info("  GET  /api/history - Get metrics history");
        logger.info("  GET  /health - Health check");
    }
    
    /**
     * Остановка сервера
     */
    public void stop() {
        if (!running) {
            return;
        }
        
        running = false;
        server.stop(5);
        executor.shutdown();
        
        try {
            if (!executor.awaitTermination(10, TimeUnit.SECONDS)) {
                executor.shutdownNow();
            }
        } catch (InterruptedException e) {
            executor.shutdownNow();
            Thread.currentThread().interrupt();
        }
        
        logger.info("DHT Monitoring Server stopped");
    }
    
    /**
     * Обработчик приема метрик от DHT узлов
     */
    private class MetricsHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if (!"POST".equals(exchange.getRequestMethod())) {
                sendResponse(exchange, 405, "Method not allowed");
                return;
            }
            
            try {
                // Чтение тела запроса
                String requestBody = readRequestBody(exchange);
                
                // Парсинг JSON с метриками
                NodeMetrics metrics = parseMetrics(requestBody);
                
                // Сохранение метрик
                storage.storeMetrics(metrics);
                
                // Обновление топологии сети
                topologyTracker.updateNode(metrics.getNodeId(), metrics.getTimestamp());
                
                // Ответ об успешном приеме
                Map<String, Object> response = new HashMap<>();
                response.put("status", "success");
                response.put("message", "Metrics received");
                response.put("node_id", metrics.getNodeId());
                response.put("timestamp", metrics.getTimestamp());
                
                sendJsonResponse(exchange, 200, response);
                
                logger.fine("Received metrics from node: " + metrics.getNodeId());
                
            } catch (Exception e) {
                logger.log(Level.WARNING, "Error processing metrics", e);
                
                Map<String, Object> errorResponse = new HashMap<>();
                errorResponse.put("status", "error");
                errorResponse.put("message", e.getMessage());
                
                sendJsonResponse(exchange, 400, errorResponse);
            }
        }
    }
    
    /**
     * Обработчик получения списка узлов
     */
    private class NodesHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if (!"GET".equals(exchange.getRequestMethod())) {
                sendResponse(exchange, 405, "Method not allowed");
                return;
            }
            
            try {
                String path = exchange.getRequestURI().getPath();
                String query = exchange.getRequestURI().getQuery();
                
                if (path.equals("/api/nodes")) {
                    // Получение списка всех узлов
                    List<String> nodes = storage.getAllNodeIds();
                    
                    Map<String, Object> response = new HashMap<>();
                    response.put("nodes", nodes);
                    response.put("count", nodes.size());
                    response.put("timestamp", System.currentTimeMillis());
                    
                    sendJsonResponse(exchange, 200, response);
                    
                } else if (path.startsWith("/api/nodes/")) {
                    // Получение метрик конкретного узла
                    String nodeId = path.substring("/api/nodes/".length());
                    
                    NodeMetrics metrics = storage.getLatestMetrics(nodeId);
                    if (metrics != null) {
                        sendJsonResponse(exchange, 200, metrics.toMap());
                    } else {
                        Map<String, Object> errorResponse = new HashMap<>();
                        errorResponse.put("status", "error");
                        errorResponse.put("message", "Node not found");
                        sendJsonResponse(exchange, 404, errorResponse);
                    }
                }
                
            } catch (Exception e) {
                logger.log(Level.WARNING, "Error handling nodes request", e);
                sendResponse(exchange, 500, "Internal server error");
            }
        }
    }
    
    /**
     * Обработчик получения топологии сети
     */
    private class TopologyHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if (!"GET".equals(exchange.getRequestMethod())) {
                sendResponse(exchange, 405, "Method not allowed");
                return;
            }
            
            try {
                Map<String, Object> topology = topologyTracker.getNetworkTopology();
                sendJsonResponse(exchange, 200, topology);
                
            } catch (Exception e) {
                logger.log(Level.WARNING, "Error handling topology request", e);
                sendResponse(exchange, 500, "Internal server error");
            }
        }
    }
    
    /**
     * Обработчик получения агрегированных метрик
     */
    private class AggregatedMetricsHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if (!"GET".equals(exchange.getRequestMethod())) {
                sendResponse(exchange, 405, "Method not allowed");
                return;
            }
            
            try {
                Map<String, Object> aggregated = storage.getAggregatedMetrics();
                sendJsonResponse(exchange, 200, aggregated);
                
            } catch (Exception e) {
                logger.log(Level.WARNING, "Error handling aggregated metrics request", e);
                sendResponse(exchange, 500, "Internal server error");
            }
        }
    }
    
    /**
     * Обработчик получения статистики сети
     */
    private class NetworkStatsHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if (!"GET".equals(exchange.getRequestMethod())) {
                sendResponse(exchange, 405, "Method not allowed");
                return;
            }
            
            try {
                Map<String, Object> stats = new HashMap<>();
                
                // Общая статистика
                stats.put("total_nodes", storage.getAllNodeIds().size());
                stats.put("active_nodes", topologyTracker.getActiveNodesCount());
                stats.put("total_metrics_received", storage.getTotalMetricsCount());
                stats.put("server_uptime", System.currentTimeMillis() - storage.getServerStartTime());
                
                // Статистика по типам метрик
                stats.put("metrics_by_type", storage.getMetricsByType());
                
                // Статистика производительности
                stats.put("avg_response_time", storage.getAverageResponseTime());
                stats.put("success_rate", storage.getOverallSuccessRate());
                
                sendJsonResponse(exchange, 200, stats);
                
            } catch (Exception e) {
                logger.log(Level.WARNING, "Error handling network stats request", e);
                sendResponse(exchange, 500, "Internal server error");
            }
        }
    }
    
    /**
     * Обработчик получения истории метрик
     */
    private class HistoryHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if (!"GET".equals(exchange.getRequestMethod())) {
                sendResponse(exchange, 405, "Method not allowed");
                return;
            }
            
            try {
                String query = exchange.getRequestURI().getQuery();
                Map<String, String> params = parseQueryParams(query);
                
                String nodeId = params.get("node_id");
                String metricName = params.get("metric");
                long fromTime = Long.parseLong(params.getOrDefault("from", "0"));
                long toTime = Long.parseLong(params.getOrDefault("to", String.valueOf(System.currentTimeMillis())));
                
                List<Map<String, Object>> history = storage.getMetricsHistory(nodeId, metricName, fromTime, toTime);
                
                Map<String, Object> response = new HashMap<>();
                response.put("history", history);
                response.put("count", history.size());
                response.put("from", fromTime);
                response.put("to", toTime);
                
                sendJsonResponse(exchange, 200, response);
                
            } catch (Exception e) {
                logger.log(Level.WARNING, "Error handling history request", e);
                sendResponse(exchange, 500, "Internal server error");
            }
        }
    }
    
    /**
     * Обработчик статических файлов
     */
    private class StaticFileHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            String path = exchange.getRequestURI().getPath();
            
            if (path.equals("/")) {
                // Главная страница - простой HTML с информацией о API
                String html = generateIndexPage();
                exchange.getResponseHeaders().set("Content-Type", "text/html; charset=UTF-8");
                sendResponse(exchange, 200, html);
            } else {
                sendResponse(exchange, 404, "Not found");
            }
        }
    }
    
    /**
     * Обработчик health check
     */
    private class HealthHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            Map<String, Object> health = new HashMap<>();
            health.put("status", "healthy");
            health.put("timestamp", System.currentTimeMillis());
            health.put("uptime", System.currentTimeMillis() - storage.getServerStartTime());
            health.put("active_nodes", topologyTracker.getActiveNodesCount());
            health.put("total_metrics", storage.getTotalMetricsCount());
            
            sendJsonResponse(exchange, 200, health);
        }
    }
    
    // Вспомогательные методы
    
    /**
     * Чтение тела HTTP запроса
     */
    private String readRequestBody(HttpExchange exchange) throws IOException {
        try (BufferedReader reader = new BufferedReader(
                new InputStreamReader(exchange.getRequestBody(), StandardCharsets.UTF_8))) {
            
            StringBuilder body = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                body.append(line);
            }
            return body.toString();
        }
    }
    
    /**
     * Парсинг JSON с метриками (упрощенная реализация)
     */
    private NodeMetrics parseMetrics(String json) {
        // Упрощенный парсер JSON для демонстрации
        // В реальном проекте лучше использовать Jackson или Gson
        
        String nodeId = extractJsonValue(json, "node_id");
        long timestamp = Long.parseLong(extractJsonValue(json, "timestamp"));
        String metricsData = extractJsonValue(json, "metrics");
        
        return new NodeMetrics(nodeId, timestamp, metricsData);
    }
    
    /**
     * Извлечение значения из JSON (упрощенная реализация)
     */
    private String extractJsonValue(String json, String key) {
        String pattern = "\"" + key + "\"\\s*:\\s*\"?([^,}\"]+)\"?";
        java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern);
        java.util.regex.Matcher m = p.matcher(json);
        
        if (m.find()) {
            return m.group(1).replace("\\\"", "\"").replace("\\n", "\n");
        }
        
        throw new IllegalArgumentException("Key not found: " + key);
    }
    
    /**
     * Парсинг параметров запроса
     */
    private Map<String, String> parseQueryParams(String query) {
        Map<String, String> params = new HashMap<>();
        
        if (query != null && !query.isEmpty()) {
            String[] pairs = query.split("&");
            for (String pair : pairs) {
                String[] keyValue = pair.split("=", 2);
                if (keyValue.length == 2) {
                    params.put(keyValue[0], keyValue[1]);
                }
            }
        }
        
        return params;
    }
    
    /**
     * Отправка JSON ответа
     */
    private void sendJsonResponse(HttpExchange exchange, int statusCode, Object data) throws IOException {
        String json = objectToJson(data);
        
        exchange.getResponseHeaders().set("Content-Type", "application/json; charset=UTF-8");
        exchange.getResponseHeaders().set("Access-Control-Allow-Origin", "*");
        exchange.getResponseHeaders().set("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
        exchange.getResponseHeaders().set("Access-Control-Allow-Headers", "Content-Type");
        
        sendResponse(exchange, statusCode, json);
    }
    
    /**
     * Отправка текстового ответа
     */
    private void sendResponse(HttpExchange exchange, int statusCode, String response) throws IOException {
        byte[] responseBytes = response.getBytes(StandardCharsets.UTF_8);
        exchange.sendResponseHeaders(statusCode, responseBytes.length);
        
        try (OutputStream os = exchange.getResponseBody()) {
            os.write(responseBytes);
        }
    }
    
    /**
     * Преобразование объекта в JSON (упрощенная реализация)
     */
    private String objectToJson(Object obj) {
        if (obj instanceof Map) {
            return mapToJson((Map<?, ?>) obj);
        } else if (obj instanceof List) {
            return listToJson((List<?>) obj);
        } else if (obj instanceof String) {
            return "\"" + obj.toString().replace("\"", "\\\"") + "\"";
        } else if (obj instanceof Number || obj instanceof Boolean) {
            return obj.toString();
        } else {
            return "\"" + obj.toString().replace("\"", "\\\"") + "\"";
        }
    }
    
    /**
     * Преобразование Map в JSON
     */
    private String mapToJson(Map<?, ?> map) {
        StringBuilder json = new StringBuilder("{");
        boolean first = true;
        
        for (Map.Entry<?, ?> entry : map.entrySet()) {
            if (!first) {
                json.append(",");
            }
            json.append("\"").append(entry.getKey()).append("\":");
            json.append(objectToJson(entry.getValue()));
            first = false;
        }
        
        json.append("}");
        return json.toString();
    }
    
    /**
     * Преобразование List в JSON
     */
    private String listToJson(List<?> list) {
        StringBuilder json = new StringBuilder("[");
        boolean first = true;
        
        for (Object item : list) {
            if (!first) {
                json.append(",");
            }
            json.append(objectToJson(item));
            first = false;
        }
        
        json.append("]");
        return json.toString();
    }
    
    /**
     * Генерация главной страницы
     */
    private String generateIndexPage() {
        return "<!DOCTYPE html>" +
            "<html>" +
            "<head>" +
            "<title>DHT Monitoring Server</title>" +
            "<style>" +
            "body { font-family: Arial, sans-serif; margin: 40px; }" +
            ".endpoint { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 5px; }" +
            ".method { font-weight: bold; color: #007acc; }" +
            "</style>" +
            "</head>" +
            "<body>" +
            "<h1>DHT Monitoring Server</h1>" +
            "<p>Централизованный сервер мониторинга для DHT сети</p>" +
            "<h2>API Endpoints</h2>" +
            "<div class=\"endpoint\">" +
            "<span class=\"method\">POST</span> /api/metrics<br>" +
            "Прием метрик от DHT узлов" +
            "</div>" +
            "<div class=\"endpoint\">" +
            "<span class=\"method\">GET</span> /api/nodes<br>" +
            "Получение списка всех узлов" +
            "</div>" +
            "<div class=\"endpoint\">" +
            "<span class=\"method\">GET</span> /api/topology<br>" +
            "Получение топологии сети" +
            "</div>" +
            "<div class=\"endpoint\">" +
            "<span class=\"method\">GET</span> /api/stats<br>" +
            "Получение статистики сети" +
            "</div>" +
            "<div class=\"endpoint\">" +
            "<span class=\"method\">GET</span> /health<br>" +
            "Проверка состояния сервера" +
            "</div>" +
            "<h2>Статус</h2>" +
            "<p>Сервер запущен и готов к приему метрик от DHT узлов.</p>" +
            "</body>" +
            "</html>";
    }
    
    // Геттеры
    
    public int getPort() {
        return port;
    }
    
    public boolean isRunning() {
        return running;
    }
    
    public MetricsStorage getStorage() {
        return storage;
    }
    
    public NetworkTopologyTracker getTopologyTracker() {
        return topologyTracker;
    }
}

