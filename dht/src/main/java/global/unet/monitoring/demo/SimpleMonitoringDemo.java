package global.unet.monitoring.demo;

import global.unet.monitoring.server.DHTMonitoringServer;
import global.unet.network.SimpleDHTNode;

import java.util.ArrayList;
import java.util.List;

/**
 * Упрощенная демонстрация системы мониторинга DHT сети
 */
public class SimpleMonitoringDemo {
    
    private static final int MONITORING_SERVER_PORT = 8080;
    private static final int BASE_DHT_PORT = 9000;
    private static final int NUM_NODES = 3;
    
    public static void main(String[] args) {
        System.out.println("=== Simple DHT Monitoring Demo ===");
        
        DHTMonitoringServer monitoringServer = null;
        List<SimpleDHTNode> dhtNodes = new ArrayList<>();
        
        try {
            // 1. Запускаем сервер мониторинга
            System.out.println("\n1. Starting monitoring server on port " + MONITORING_SERVER_PORT);
            monitoringServer = new DHTMonitoringServer(MONITORING_SERVER_PORT);
            monitoringServer.start();
            
            System.out.println("   Monitoring server started successfully!");
            System.out.println("   Access: http://localhost:" + MONITORING_SERVER_PORT);
            
            // Ждем запуска сервера
            Thread.sleep(2000);
            
            // 2. Создаем и запускаем DHT узлы
            System.out.println("\n2. Creating " + NUM_NODES + " DHT nodes...");
            
            for (int i = 0; i < NUM_NODES; i++) {
                int port = BASE_DHT_PORT + i;
                SimpleDHTNode node = new SimpleDHTNode(port);
                dhtNodes.add(node);
                node.start();
                
                System.out.println("   Node " + (i + 1) + " started on port " + port);
                System.out.println("   Node ID: " + node.getNodeId().toHexString().substring(0, 16) + "...");
                
                // Небольшая задержка между запусками узлов
                Thread.sleep(1000);
            }
            
            // 3. Показываем информацию о системе
            System.out.println("\n3. System Information:");
            System.out.println("   Monitoring Server: http://localhost:" + MONITORING_SERVER_PORT);
            System.out.println("   API Endpoints:");
            System.out.println("     GET  /api/nodes     - List of DHT nodes");
            System.out.println("     GET  /api/stats     - Network statistics");
            System.out.println("     GET  /api/topology  - Network topology");
            System.out.println("     GET  /health        - Server health check");
            System.out.println("\n   DHT Nodes:");
            for (int i = 0; i < dhtNodes.size(); i++) {
                SimpleDHTNode node = dhtNodes.get(i);
                System.out.println("     Node " + (i + 1) + ": localhost:" + node.getPort() + 
                                 " (ID: " + node.getNodeId().toHexString().substring(0, 8) + "...)");
            }
            
            // 4. Демонстрация работы
            System.out.println("\n4. Demo is running...");
            System.out.println("   - Metrics are being collected every 5 seconds");
            System.out.println("   - Open http://localhost:" + MONITORING_SERVER_PORT + " in your browser");
            System.out.println("   - Check the monitoring dashboard for real-time data");
            
            // Ждем 30 секунд для демонстрации
            System.out.println("\n   Demo will run for 30 seconds...");
            for (int i = 30; i > 0; i--) {
                System.out.print("\r   Time remaining: " + i + " seconds");
                Thread.sleep(1000);
            }
            System.out.println("\n");
            
        } catch (Exception e) {
            System.err.println("Error in demo: " + e.getMessage());
            e.printStackTrace();
            
        } finally {
            // Очистка ресурсов
            System.out.println("\n=== Shutting down demo ===");
            
            // Останавливаем DHT узлы
            for (int i = 0; i < dhtNodes.size(); i++) {
                try {
                    dhtNodes.get(i).stop();
                    System.out.println("Stopped DHT node " + (i + 1));
                } catch (Exception e) {
                    System.err.println("Error stopping node " + (i + 1) + ": " + e.getMessage());
                }
            }
            
            // Останавливаем сервер мониторинга
            if (monitoringServer != null) {
                try {
                    monitoringServer.stop();
                    System.out.println("Stopped monitoring server");
                } catch (Exception e) {
                    System.err.println("Error stopping monitoring server: " + e.getMessage());
                }
            }
            
            System.out.println("Demo completed!");
        }
    }
}

