package global.unet.monitoring.export;

import global.unet.monitoring.metrics.*;
import java.util.*;

/**
 * Экспортер метрик в формате Prometheus
 */
public class PrometheusExporter {
    private final MetricsRegistry registry;
    
    public PrometheusExporter(MetricsRegistry registry) {
        this.registry = registry;
    }
    
    /**
     * Экспорт всех метрик в формате Prometheus
     */
    public String export() {
        StringBuilder sb = new StringBuilder();
        
        // Добавляем информацию о DHT узле
        sb.append("# DHT Node Metrics\n");
        sb.append("# Generated at: ").append(new Date()).append("\n\n");
        
        for (Metric metric : registry.getMetrics()) {
            exportMetric(sb, metric);
        }
        
        return sb.toString();
    }
    
    /**
     * Экспорт одной метрики
     */
    private void exportMetric(StringBuilder sb, Metric metric) {
        // Добавляем комментарий с описанием
        sb.append("# HELP ").append(metric.getName()).append(" ").append(metric.getDescription()).append("\n");
        
        // Добавляем тип метрики
        sb.append("# TYPE ").append(metric.getName()).append(" ").append(getPrometheusType(metric)).append("\n");
        
        // Добавляем образцы метрики
        List<MetricSample> samples = metric.getSamples();
        if (samples.isEmpty()) {
            // Если нет образцов, добавляем пустое значение
            sb.append(metric.getName()).append(" 0\n");
        } else {
            for (MetricSample sample : samples) {
                exportSample(sb, sample);
            }
        }
        
        sb.append("\n");
    }
    
    /**
     * Экспорт одного образца метрики
     */
    private void exportSample(StringBuilder sb, MetricSample sample) {
        sb.append(sample.getName());
        
        // Добавляем метки
        Map<String, String> labels = sample.getLabels();
        if (!labels.isEmpty()) {
            sb.append("{");
            boolean first = true;
            
            // Сортируем метки для консистентности
            List<Map.Entry<String, String>> sortedLabels = new ArrayList<>(labels.entrySet());
            sortedLabels.sort(Map.Entry.comparingByKey());
            
            for (Map.Entry<String, String> label : sortedLabels) {
                if (!first) {
                    sb.append(",");
                }
                sb.append(label.getKey()).append("=\"").append(escapeValue(label.getValue())).append("\"");
                first = false;
            }
            sb.append("}");
        }
        
        // Добавляем значение
        sb.append(" ").append(formatValue(sample.getValue()));
        
        // Добавляем временную метку (опционально)
        if (sample.getTimestamp() > 0) {
            sb.append(" ").append(sample.getTimestamp());
        }
        
        sb.append("\n");
    }
    
    /**
     * Получение типа метрики для Prometheus
     */
    private String getPrometheusType(Metric metric) {
        if (metric instanceof Counter) {
            return "counter";
        } else if (metric instanceof Gauge) {
            return "gauge";
        } else if (metric instanceof Histogram) {
            return "histogram";
        } else {
            return "untyped";
        }
    }
    
    /**
     * Форматирование значения метрики
     */
    private String formatValue(double value) {
        if (Double.isNaN(value)) {
            return "NaN";
        } else if (Double.isInfinite(value)) {
            return value > 0 ? "+Inf" : "-Inf";
        } else {
            // Форматируем с разумной точностью
            if (value == Math.floor(value)) {
                return String.valueOf((long) value);
            } else {
                return String.format("%.6f", value).replaceAll("0+$", "").replaceAll("\\.$", "");
            }
        }
    }
    
    /**
     * Экранирование значений меток
     */
    private String escapeValue(String value) {
        return value.replace("\\", "\\\\")
                   .replace("\"", "\\\"")
                   .replace("\n", "\\n")
                   .replace("\t", "\\t")
                   .replace("\r", "\\r");
    }
    
    /**
     * Экспорт метрик для конкретного узла
     */
    public String exportForNode(String nodeId) {
        StringBuilder sb = new StringBuilder();
        
        // Добавляем информацию о узле
        sb.append("# DHT Node Metrics for node: ").append(nodeId).append("\n");
        sb.append("# Generated at: ").append(new Date()).append("\n\n");
        
        // Добавляем метку узла ко всем метрикам
        for (Metric metric : registry.getMetrics()) {
            exportMetricWithNodeLabel(sb, metric, nodeId);
        }
        
        return sb.toString();
    }
    
    /**
     * Экспорт метрики с добавлением метки узла
     */
    private void exportMetricWithNodeLabel(StringBuilder sb, Metric metric, String nodeId) {
        // Добавляем комментарий с описанием
        sb.append("# HELP ").append(metric.getName()).append(" ").append(metric.getDescription()).append("\n");
        
        // Добавляем тип метрики
        sb.append("# TYPE ").append(metric.getName()).append(" ").append(getPrometheusType(metric)).append("\n");
        
        // Добавляем образцы метрики с меткой узла
        List<MetricSample> samples = metric.getSamples();
        if (samples.isEmpty()) {
            // Если нет образцов, добавляем пустое значение с меткой узла
            sb.append(metric.getName()).append("{node_id=\"").append(nodeId).append("\"} 0\n");
        } else {
            for (MetricSample sample : samples) {
                exportSampleWithNodeLabel(sb, sample, nodeId);
            }
        }
        
        sb.append("\n");
    }
    
    /**
     * Экспорт образца с добавлением метки узла
     */
    private void exportSampleWithNodeLabel(StringBuilder sb, MetricSample sample, String nodeId) {
        sb.append(sample.getName());
        
        // Добавляем метки (включая метку узла)
        Map<String, String> labels = new HashMap<>(sample.getLabels());
        labels.put("node_id", nodeId);
        
        if (!labels.isEmpty()) {
            sb.append("{");
            boolean first = true;
            
            // Сортируем метки для консистентности
            List<Map.Entry<String, String>> sortedLabels = new ArrayList<>(labels.entrySet());
            sortedLabels.sort(Map.Entry.comparingByKey());
            
            for (Map.Entry<String, String> label : sortedLabels) {
                if (!first) {
                    sb.append(",");
                }
                sb.append(label.getKey()).append("=\"").append(escapeValue(label.getValue())).append("\"");
                first = false;
            }
            sb.append("}");
        }
        
        // Добавляем значение
        sb.append(" ").append(formatValue(sample.getValue()));
        
        // Добавляем временную метку (опционально)
        if (sample.getTimestamp() > 0) {
            sb.append(" ").append(sample.getTimestamp());
        }
        
        sb.append("\n");
    }
    
    /**
     * Получение статистики экспорта
     */
    public Map<String, Object> getExportStats() {
        Map<String, Object> stats = new HashMap<>();
        
        int totalMetrics = 0;
        int totalSamples = 0;
        
        for (Metric metric : registry.getMetrics()) {
            totalMetrics++;
            totalSamples += metric.getSamples().size();
        }
        
        stats.put("total_metrics", totalMetrics);
        stats.put("total_samples", totalSamples);
        stats.put("export_timestamp", System.currentTimeMillis());
        
        return stats;
    }
}

