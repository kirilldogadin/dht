package global.unet.monitoring.metrics;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicReference;

/**
 * Измеритель - метрика, которая может увеличиваться и уменьшаться
 */
public class Gauge implements Metric {
    private final String name;
    private final String description;
    private final String[] labelNames;
    private final Map<String, AtomicReference<Double>> values;
    
    /**
     * Конструктор измерителя
     */
    public Gauge(String name, String description, String... labelNames) {
        this.name = name;
        this.description = description;
        this.labelNames = labelNames.clone();
        this.values = new ConcurrentHashMap<>();
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public String getDescription() {
        return description;
    }
    
    @Override
    public String[] getLabelNames() {
        return labelNames.clone();
    }
    
    /**
     * Установить значение измерителя
     */
    public void set(double value, String... labelValues) {
        String key = createLabelKey(labelValues);
        values.computeIfAbsent(key, k -> new AtomicReference<>(0.0))
               .set(value);
    }
    
    /**
     * Увеличить значение измерителя
     */
    public void increment(double value, String... labelValues) {
        String key = createLabelKey(labelValues);
        values.computeIfAbsent(key, k -> new AtomicReference<>(0.0))
               .updateAndGet(current -> current + value);
    }
    
    /**
     * Увеличить значение измерителя на 1
     */
    public void increment(String... labelValues) {
        increment(1.0, labelValues);
    }
    
    /**
     * Уменьшить значение измерителя
     */
    public void decrement(double value, String... labelValues) {
        increment(-value, labelValues);
    }
    
    /**
     * Уменьшить значение измерителя на 1
     */
    public void decrement(String... labelValues) {
        decrement(1.0, labelValues);
    }
    
    /**
     * Получить значение измерителя
     */
    public double getValue(String... labelValues) {
        String key = createLabelKey(labelValues);
        AtomicReference<Double> value = values.get(key);
        return value != null ? value.get() : 0.0;
    }
    
    @Override
    public List<MetricSample> getSamples() {
        List<MetricSample> samples = new ArrayList<>();
        
        for (Map.Entry<String, AtomicReference<Double>> entry : values.entrySet()) {
            Map<String, String> labels = parseLabelKey(entry.getKey());
            double value = entry.getValue().get();
            samples.add(new MetricSample(name, labels, value));
        }
        
        return samples;
    }
    
    @Override
    public void reset() {
        values.clear();
    }
    
    /**
     * Установить значение с помощью функции
     */
    public void setToCurrentTime(String... labelValues) {
        set(System.currentTimeMillis() / 1000.0, labelValues);
    }
    
    /**
     * Установить значение в процентах (0-100)
     */
    public void setPercent(double percent, String... labelValues) {
        if (percent < 0 || percent > 100) {
            throw new IllegalArgumentException("Percent must be between 0 and 100");
        }
        set(percent, labelValues);
    }
    
    /**
     * Создать ключ из значений меток
     */
    private String createLabelKey(String... labelValues) {
        if (labelValues.length != labelNames.length) {
            throw new IllegalArgumentException(
                String.format("Expected %d label values, got %d", labelNames.length, labelValues.length)
            );
        }
        
        if (labelNames.length == 0) {
            return "";
        }
        
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < labelNames.length; i++) {
            if (i > 0) {
                sb.append(",");
            }
            sb.append(labelNames[i]).append("=").append(labelValues[i]);
        }
        
        return sb.toString();
    }
    
    /**
     * Разобрать ключ меток в карту
     */
    private Map<String, String> parseLabelKey(String key) {
        Map<String, String> labels = new HashMap<>();
        
        if (key.isEmpty()) {
            return labels;
        }
        
        String[] pairs = key.split(",");
        for (String pair : pairs) {
            String[] parts = pair.split("=", 2);
            if (parts.length == 2) {
                labels.put(parts[0], parts[1]);
            }
        }
        
        return labels;
    }
    
    @Override
    public String toString() {
        return String.format("Gauge{name='%s', description='%s', samples=%d}",
            name, description, values.size());
    }
}

