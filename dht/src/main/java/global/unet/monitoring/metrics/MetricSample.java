package global.unet.monitoring.metrics;

import java.util.Map;
import java.util.HashMap;

/**
 * Образец метрики с метками и значением
 */
public class MetricSample {
    private final String name;
    private final Map<String, String> labels;
    private final double value;
    private final long timestamp;
    
    /**
     * Конструктор образца метрики
     */
    public MetricSample(String name, Map<String, String> labels, double value) {
        this.name = name;
        this.labels = new HashMap<>(labels);
        this.value = value;
        this.timestamp = System.currentTimeMillis();
    }
    
    /**
     * Конструктор образца метрики без меток
     */
    public MetricSample(String name, double value) {
        this(name, new HashMap<>(), value);
    }
    
    /**
     * Получить имя метрики
     */
    public String getName() {
        return name;
    }
    
    /**
     * Получить метки
     */
    public Map<String, String> getLabels() {
        return new HashMap<>(labels);
    }
    
    /**
     * Получить значение
     */
    public double getValue() {
        return value;
    }
    
    /**
     * Получить временную метку
     */
    public long getTimestamp() {
        return timestamp;
    }
    
    /**
     * Создать ключ для группировки образцов
     */
    public String getLabelKey() {
        if (labels.isEmpty()) {
            return "";
        }
        
        StringBuilder sb = new StringBuilder();
        labels.entrySet().stream()
            .sorted(Map.Entry.comparingByKey())
            .forEach(entry -> {
                if (sb.length() > 0) {
                    sb.append(",");
                }
                sb.append(entry.getKey()).append("=").append(entry.getValue());
            });
        
        return sb.toString();
    }
    
    @Override
    public String toString() {
        return String.format("MetricSample{name='%s', labels=%s, value=%f, timestamp=%d}",
            name, labels, value, timestamp);
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        
        MetricSample that = (MetricSample) obj;
        return Double.compare(that.value, value) == 0 &&
               timestamp == that.timestamp &&
               name.equals(that.name) &&
               labels.equals(that.labels);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(name, labels, value, timestamp);
    }
}

