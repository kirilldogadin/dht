package global.unet.monitoring.metrics;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

/**
 * Счетчик - метрика, которая только увеличивается
 */
public class Counter implements Metric {
    private final String name;
    private final String description;
    private final String[] labelNames;
    private final Map<String, AtomicLong> values;
    
    /**
     * Конструктор счетчика
     */
    public Counter(String name, String description, String... labelNames) {
        this.name = name;
        this.description = description;
        this.labelNames = labelNames.clone();
        this.values = new ConcurrentHashMap<>();
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public String getDescription() {
        return description;
    }
    
    @Override
    public String[] getLabelNames() {
        return labelNames.clone();
    }
    
    /**
     * Увеличить счетчик на 1
     */
    public void increment(String... labelValues) {
        increment(1, labelValues);
    }
    
    /**
     * Увеличить счетчик на заданное значение
     */
    public void increment(double value, String... labelValues) {
        if (value < 0) {
            throw new IllegalArgumentException("Counter can only be incremented by non-negative values");
        }
        
        String key = createLabelKey(labelValues);
        values.computeIfAbsent(key, k -> new AtomicLong(0))
               .addAndGet((long) (value * 1000)); // Храним в миллисекундах для точности
    }
    
    /**
     * Получить значение счетчика
     */
    public double getValue(String... labelValues) {
        String key = createLabelKey(labelValues);
        AtomicLong value = values.get(key);
        return value != null ? value.get() / 1000.0 : 0.0;
    }
    
    @Override
    public List<MetricSample> getSamples() {
        List<MetricSample> samples = new ArrayList<>();
        
        for (Map.Entry<String, AtomicLong> entry : values.entrySet()) {
            Map<String, String> labels = parseLabelKey(entry.getKey());
            double value = entry.getValue().get() / 1000.0;
            samples.add(new MetricSample(name, labels, value));
        }
        
        return samples;
    }
    
    @Override
    public void reset() {
        values.clear();
    }
    
    /**
     * Создать ключ из значений меток
     */
    private String createLabelKey(String... labelValues) {
        if (labelValues.length != labelNames.length) {
            throw new IllegalArgumentException(
                String.format("Expected %d label values, got %d", labelNames.length, labelValues.length)
            );
        }
        
        if (labelNames.length == 0) {
            return "";
        }
        
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < labelNames.length; i++) {
            if (i > 0) {
                sb.append(",");
            }
            sb.append(labelNames[i]).append("=").append(labelValues[i]);
        }
        
        return sb.toString();
    }
    
    /**
     * Разобрать ключ меток в карту
     */
    private Map<String, String> parseLabelKey(String key) {
        Map<String, String> labels = new HashMap<>();
        
        if (key.isEmpty()) {
            return labels;
        }
        
        String[] pairs = key.split(",");
        for (String pair : pairs) {
            String[] parts = pair.split("=", 2);
            if (parts.length == 2) {
                labels.put(parts[0], parts[1]);
            }
        }
        
        return labels;
    }
    
    @Override
    public String toString() {
        return String.format("Counter{name='%s', description='%s', samples=%d}",
            name, description, values.size());
    }
}

