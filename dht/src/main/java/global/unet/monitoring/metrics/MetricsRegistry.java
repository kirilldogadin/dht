package global.unet.monitoring.metrics;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Регистр метрик для хранения и управления всеми метриками
 */
public class MetricsRegistry {
    private final Map<String, Metric> metrics = new ConcurrentHashMap<>();
    
    /**
     * Регистрация счетчика
     */
    public Counter registerCounter(String name, String description, String... labelNames) {
        if (metrics.containsKey(name)) {
            throw new IllegalArgumentException("Metric with name '" + name + "' already exists");
        }
        
        Counter counter = new Counter(name, description, labelNames);
        metrics.put(name, counter);
        return counter;
    }
    
    /**
     * Регистрация измерителя
     */
    public Gauge registerGauge(String name, String description, String... labelNames) {
        if (metrics.containsKey(name)) {
            throw new IllegalArgumentException("Metric with name '" + name + "' already exists");
        }
        
        Gauge gauge = new Gauge(name, description, labelNames);
        metrics.put(name, gauge);
        return gauge;
    }
    
    /**
     * Регистрация гистограммы
     */
    public Histogram registerHistogram(String name, String description, String... labelNames) {
        if (metrics.containsKey(name)) {
            throw new IllegalArgumentException("Metric with name '" + name + "' already exists");
        }
        
        Histogram histogram = new Histogram(name, description, labelNames);
        metrics.put(name, histogram);
        return histogram;
    }
    
    /**
     * Регистрация гистограммы с пользовательскими границами
     */
    public Histogram registerHistogram(String name, String description, double[] buckets, String... labelNames) {
        if (metrics.containsKey(name)) {
            throw new IllegalArgumentException("Metric with name '" + name + "' already exists");
        }
        
        Histogram histogram = new Histogram(name, description, buckets, labelNames);
        metrics.put(name, histogram);
        return histogram;
    }
    
    /**
     * Получение всех метрик
     */
    public Collection<Metric> getMetrics() {
        return new ArrayList<>(metrics.values());
    }
    
    /**
     * Получение метрики по имени
     */
    public Metric getMetric(String name) {
        return metrics.get(name);
    }
    
    /**
     * Получение счетчика по имени
     */
    public Counter getCounter(String name) {
        Metric metric = metrics.get(name);
        if (metric instanceof Counter) {
            return (Counter) metric;
        }
        return null;
    }
    
    /**
     * Получение измерителя по имени
     */
    public Gauge getGauge(String name) {
        Metric metric = metrics.get(name);
        if (metric instanceof Gauge) {
            return (Gauge) metric;
        }
        return null;
    }
    
    /**
     * Получение гистограммы по имени
     */
    public Histogram getHistogram(String name) {
        Metric metric = metrics.get(name);
        if (metric instanceof Histogram) {
            return (Histogram) metric;
        }
        return null;
    }
    
    /**
     * Проверка существования метрики
     */
    public boolean hasMetric(String name) {
        return metrics.containsKey(name);
    }
    
    /**
     * Удаление метрики
     */
    public boolean removeMetric(String name) {
        return metrics.remove(name) != null;
    }
    
    /**
     * Очистка всех метрик
     */
    public void clear() {
        metrics.clear();
    }
    
    /**
     * Сброс всех метрик
     */
    public void resetAll() {
        for (Metric metric : metrics.values()) {
            metric.reset();
        }
    }
    
    /**
     * Получение количества зарегистрированных метрик
     */
    public int size() {
        return metrics.size();
    }
    
    /**
     * Получение имен всех метрик
     */
    public Set<String> getMetricNames() {
        return new HashSet<>(metrics.keySet());
    }
    
    /**
     * Установка значения измерителя (удобный метод)
     */
    public void setGauge(String name, double value, String... labelValues) {
        Gauge gauge = getGauge(name);
        if (gauge != null) {
            gauge.set(value, labelValues);
        }
    }
    
    /**
     * Увеличение счетчика (удобный метод)
     */
    public void incrementCounter(String name, String... labelValues) {
        incrementCounter(name, 1, labelValues);
    }
    
    /**
     * Увеличение счетчика на заданное значение (удобный метод)
     */
    public void incrementCounter(String name, double value, String... labelValues) {
        Counter counter = getCounter(name);
        if (counter != null) {
            counter.increment(value, labelValues);
        }
    }
    
    /**
     * Наблюдение значения для гистограммы (удобный метод)
     */
    public void observeHistogram(String name, double value, String... labelValues) {
        Histogram histogram = getHistogram(name);
        if (histogram != null) {
            histogram.observe(value, labelValues);
        }
    }
    
    /**
     * Получение всех образцов метрик
     */
    public List<MetricSample> getAllSamples() {
        List<MetricSample> allSamples = new ArrayList<>();
        
        for (Metric metric : metrics.values()) {
            allSamples.addAll(metric.getSamples());
        }
        
        return allSamples;
    }
    
    /**
     * Получение статистики регистра
     */
    public Map<String, Object> getStats() {
        Map<String, Object> stats = new HashMap<>();
        
        int counters = 0;
        int gauges = 0;
        int histograms = 0;
        int totalSamples = 0;
        
        for (Metric metric : metrics.values()) {
            if (metric instanceof Counter) {
                counters++;
            } else if (metric instanceof Gauge) {
                gauges++;
            } else if (metric instanceof Histogram) {
                histograms++;
            }
            
            totalSamples += metric.getSamples().size();
        }
        
        stats.put("total_metrics", metrics.size());
        stats.put("counters", counters);
        stats.put("gauges", gauges);
        stats.put("histograms", histograms);
        stats.put("total_samples", totalSamples);
        
        return stats;
    }
    
    @Override
    public String toString() {
        Map<String, Object> stats = getStats();
        return String.format("MetricsRegistry{metrics=%d, counters=%d, gauges=%d, histograms=%d, samples=%d}",
            stats.get("total_metrics"), stats.get("counters"), stats.get("gauges"), 
            stats.get("histograms"), stats.get("total_samples"));
    }
}

