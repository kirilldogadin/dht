package global.unet.network;

import global.unet.domain.id.KademliaId;
import global.unet.domain.structures.NodeInfo;
import global.unet.domain.routing.XorTreeRoutingTable;
import global.unet.domain.search.IterativeLookup;
import global.unet.network.rpc.*;
import global.unet.network.rpc.handlers.*;
import global.unet.monitoring.DHTMetricsAgent;

import java.io.IOException;
import java.net.*;
import java.util.*;
import java.util.concurrent.*;

/**
 * Простой DHT узел для демонстрации работы сети
 */
public class SimpleDHTNode {
    
    private final KademliaId nodeId;
    private final int port;
    private final XorTreeRoutingTable routingTable;
    private final IterativeLookup iterativeLookup;
    private final DatagramSocket socket;
    private final ExecutorService executorService;
    private final Map<String, String> localStorage;
    
    private final RPCManager rpcManager;
    private final RPCClient rpcClient;
    private final DHTMetricsAgent metricsAgent;
    
    private volatile boolean running = false;
    
    public SimpleDHTNode(int port) throws Exception {
        this.port = port;
        this.nodeId = generateRandomNodeId();
        this.routingTable = new XorTreeRoutingTable(nodeId);
        this.socket = new DatagramSocket(port);
        this.executorService = Executors.newFixedThreadPool(10);
        this.localStorage = new ConcurrentHashMap<>();
        
        // Инициализируем RPC компоненты
        this.rpcManager = new RPCManager(nodeId);
        this.rpcClient = new UDPClient(socket);
        
        // Инициализируем агент мониторинга
        this.metricsAgent = new DHTMetricsAgent(nodeId.toHexString(), "http://localhost:8080");
        
        // Регистрируем обработчики RPC
        registerRPCHandlers();
        
        // Создаем IterativeLookup с колбэком для сетевых запросов
        this.iterativeLookup = new IterativeLookup(this::performNetworkQuery);
        
        System.out.println("DHT узел создан:");
        System.out.println("  ID: " + nodeId.toHexString());
        System.out.println("  Порт: " + port);
    }
    
    /**
     * Регистрирует обработчики RPC
     */
    private void registerRPCHandlers() {
        // Используем стандартные обработчики
        rpcManager.registerHandler(new PingHandler(nodeId, routingTable));
        rpcManager.registerHandler(new StoreHandler(nodeId, routingTable, localStorage));
        rpcManager.registerHandler(new FindNodeHandler(nodeId, routingTable));
        rpcManager.registerHandler(new FindValueHandler(nodeId, routingTable, localStorage));
    }
    
    /**
     * Запускает узел
     */
    public void start() {
        running = true;
        
        // Запускаем обработчик входящих сообщений
        executorService.submit(this::messageHandler);
        
        // Запускаем агент мониторинга
        metricsAgent.start();
        
        System.out.println("DHT узел запущен на порту " + port);
    }
    
    /**
     * Останавливает узел
     */
    public void stop() {
        running = false;
        
        // Останавливаем агент мониторинга
        if (metricsAgent != null) {
            metricsAgent.stop();
        }
        
        if (socket != null && !socket.isClosed()) {
            socket.close();
        }
        
        iterativeLookup.shutdown();
        executorService.shutdown();
        
        try {
            if (!executorService.awaitTermination(5, TimeUnit.SECONDS)) {
                executorService.shutdownNow();
            }
        } catch (InterruptedException e) {
            executorService.shutdownNow();
            Thread.currentThread().interrupt();
        }
        
        System.out.println("DHT узел остановлен");
    }
    
    /**
     * Присоединяется к сети через bootstrap узел
     */
    public void joinNetwork(String bootstrapHost, int bootstrapPort) {
        try {
            // Создаем информацию о bootstrap узле
            URI bootstrapUri = new URI("udp://" + bootstrapHost + ":" + bootstrapPort);
            KademliaId bootstrapId = generateRandomNodeId(); // В реальной реализации получили бы от узла
            NodeInfo bootstrapNode = new NodeInfo(bootstrapUri, bootstrapId, bootstrapPort);
            
            // Добавляем bootstrap узел в таблицу маршрутизации
            routingTable.addNode(bootstrapNode);
            
            // Отправляем PING для проверки соединения
            InetAddress bootstrapAddress = InetAddress.getByName(bootstrapHost);
            CompletableFuture<DHTMessage> pingFuture = rpcManager.sendPing(bootstrapAddress, bootstrapPort, rpcClient);
            
            try {
                DHTMessage pongResponse = pingFuture.get(5, TimeUnit.SECONDS);
                System.out.println("Получен PONG от bootstrap узла: " + pongResponse.getSenderId().toHexString());
                
                // Выполняем поиск самого себя для заполнения таблицы маршрутизации
                List<NodeInfo> initialNodes = Arrays.asList(bootstrapNode);
                CompletableFuture<IterativeLookup.LookupResult> future = 
                    iterativeLookup.performLookup(nodeId, initialNodes);
                
                IterativeLookup.LookupResult result = future.get(10, TimeUnit.SECONDS);
                
                if (result.isSuccessful()) {
                    // Добавляем найденные узлы в таблицу маршрутизации
                    for (NodeInfo node : result.getClosestNodes()) {
                        routingTable.addNode(node);
                    }
                    System.out.println("Успешно присоединился к сети. Найдено узлов: " + result.getClosestNodes().size());
                } else {
                    System.out.println("Ошибка присоединения к сети: " + result.getErrorMessage());
                }
            } catch (Exception e) {
                System.err.println("Ошибка при подключении к bootstrap узлу: " + e.getMessage());
            }
            
        } catch (Exception e) {
            System.err.println("Ошибка присоединения к сети: " + e.getMessage());
        }
    }
    
    /**
     * Сохраняет значение по ключу
     */
    public void store(String key, String value) {
        try {
            KademliaId keyId = KademliaId.fromString(key);
            
            // Находим ближайшие узлы к ключу
            List<NodeInfo> closestNodes = routingTable.findClosestNodes(keyId, 3);
            
            if (closestNodes.isEmpty()) {
                // Если нет других узлов, сохраняем локально
                localStorage.put(key, value);
                System.out.println("Сохранено локально: " + key + " = " + value);
            } else {
                // Отправляем STORE сообщения ближайшим узлам
                List<CompletableFuture<DHTMessage>> futures = new ArrayList<>();
                
                for (NodeInfo node : closestNodes) {
                    try {
                        InetAddress nodeAddress = InetAddress.getByName(node.getUri().getHost());
                        CompletableFuture<DHTMessage> future = 
                            rpcManager.sendStore(key, value, nodeAddress, node.getPort(), rpcClient);
                        futures.add(future);
                    } catch (Exception e) {
                        System.err.println("Ошибка отправки STORE к узлу " + node.getUnionId() + ": " + e.getMessage());
                    }
                }
                
                // Ждем завершения всех запросов
                CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
                    .thenAccept(v -> {
                        int successCount = 0;
                        for (CompletableFuture<DHTMessage> future : futures) {
                            try {
                                DHTMessage response = future.get();
                                if (response.getType() == MessageType.STORE_RESPONSE && 
                                    "SUCCESS".equals(response.getStringParameter("status"))) {
                                    successCount++;
                                }
                            } catch (Exception e) {
                                // Игнорируем ошибки
                            }
                        }
                        System.out.println("STORE операция завершена: " + successCount + "/" + futures.size() + " успешно");
                    })
                    .exceptionally(e -> {
                        System.err.println("Ошибка при выполнении STORE операций: " + e.getMessage());
                        return null;
                    });
            }
            
        } catch (Exception e) {
            System.err.println("Ошибка сохранения: " + e.getMessage());
        }
    }
    
    /**
     * Получает значение по ключу
     */
    public String get(String key) {
        try {
            // Сначала проверяем локальное хранилище
            String localValue = localStorage.get(key);
            if (localValue != null) {
                System.out.println("Найдено локально: " + key + " = " + localValue);
                return localValue;
            }
            
            KademliaId keyId = KademliaId.fromString(key);
            
            // Выполняем поиск узлов, ответственных за ключ
            List<NodeInfo> initialNodes = routingTable.findClosestNodes(keyId, 5);
            
            if (initialNodes.isEmpty()) {
                System.out.println("Ключ не найден: " + key);
                return null;
            }
            
            CompletableFuture<IterativeLookup.LookupResult> future = 
                iterativeLookup.performLookup(keyId, initialNodes);
            
            IterativeLookup.LookupResult result = future.get(10, TimeUnit.SECONDS);
            
            if (result.isSuccessful()) {
                // Отправляем FIND_VALUE запросы ближайшим узлам
                for (NodeInfo node : result.getClosestNodes()) {
                    try {
                        InetAddress nodeAddress = InetAddress.getByName(node.getUri().getHost());
                        CompletableFuture<DHTMessage> findValueFuture = 
                            rpcManager.sendFindValue(key, nodeAddress, node.getPort(), rpcClient);
                        
                        DHTMessage response = findValueFuture.get(5, TimeUnit.SECONDS);
                        
                        if (response.getType() == MessageType.VALUE_RESPONSE) {
                            String value = response.getStringParameter("value");
                            if (value != null) {
                                System.out.println("Найдено в сети: " + key + " = " + value);
                                return value;
                            }
                        }
                    } catch (Exception e) {
                        System.err.println("Ошибка при запросе FIND_VALUE к узлу " + node.getUnionId() + ": " + e.getMessage());
                    }
                }
            }
            
            System.out.println("Ключ не найден в сети: " + key);
            return null;
            
        } catch (Exception e) {
            System.err.println("Ошибка поиска: " + e.getMessage());
            return null;
        }
    }
    
    /**
     * Выполняет PING запрос к указанному узлу
     */
    public boolean ping(String host, int port) {
        try {
            InetAddress address = InetAddress.getByName(host);
            CompletableFuture<DHTMessage> future = rpcManager.sendPing(address, port, rpcClient);
            
            DHTMessage response = future.get(5, TimeUnit.SECONDS);
            boolean success = response.getType() == MessageType.PONG;
            
            System.out.println("PING к " + host + ":" + port + " - " + (success ? "успешно" : "неудачно"));
            return success;
            
        } catch (Exception e) {
            System.err.println("Ошибка выполнения PING: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * Получает статистику узла
     */
    public NodeStats getStats() {
        return new NodeStats(
            nodeId.toHexString(),
            port,
            routingTable.getNodeCount(),
            localStorage.size(),
            routingTable.getBucketSizes()
        );
    }
    
    /**
     * Обработчик входящих сообщений
     */
    private void messageHandler() {
        byte[] buffer = new byte[1024];
        
        while (running) {
            try {
                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
                socket.receive(packet);
                
                String message = new String(packet.getData(), 0, packet.getLength());
                InetAddress senderAddress = packet.getAddress();
                int senderPort = packet.getPort();
                
                // Обрабатываем сообщение в отдельном потоке
                executorService.submit(() -> processMessage(message, senderAddress, senderPort));
                
            } catch (IOException e) {
                if (running) {
                    System.err.println("Ошибка получения сообщения: " + e.getMessage());
                }
            }
        }
    }
    
    /**
     * Обрабатывает входящее сообщение
     */
    private void processMessage(String message, InetAddress senderAddress, int senderPort) {
        try {
            // Обрабатываем сообщение через RPCManager
            String response = rpcManager.handleIncomingMessage(message, senderAddress, senderPort);
            
            // Если есть ответ, отправляем его
            if (response != null) {
                sendMessage(response, senderAddress, senderPort);
            }
            
        } catch (Exception e) {
            System.err.println("Ошибка обработки сообщения: " + e.getMessage());
        }
    }
    
    /**
     * Отправляет сообщение узлу
     */
    private void sendMessage(String message, InetAddress address, int port) throws IOException {
        rpcClient.sendMessage(message, address, port);
    }
    
    /**
     * Выполняет сетевой запрос для IterativeLookup
     */
    private CompletableFuture<List<NodeInfo>> performNetworkQuery(NodeInfo node, KademliaId targetId) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                InetAddress nodeAddress = InetAddress.getByName(node.getUri().getHost());
                CompletableFuture<DHTMessage> future = 
                    rpcManager.sendFindNode(targetId, nodeAddress, node.getPort(), rpcClient);
                
                DHTMessage response = future.get(5, TimeUnit.SECONDS);
                
                if (response.getType() == MessageType.NODES_RESPONSE) {
                    return response.getNodeListParameter("nodes");
                } else {
                    System.err.println("Неожиданный ответ на FIND_NODE: " + response.getType());
                    return new ArrayList<>();
                }
                
            } catch (Exception e) {
                System.err.println("Ошибка сетевого запроса: " + e.getMessage());
                return new ArrayList<>();
            }
        }, executorService);
    }
    
    /**
     * Генерирует случайный ID узла
     */
    private KademliaId generateRandomNodeId() {
        byte[] bytes = new byte[20];
        new Random().nextBytes(bytes);
        return new KademliaId(bytes);
    }
    
    /**
     * Статистика узла
     */
    public static class NodeStats {
        public final String nodeId;
        public final int port;
        public final int knownNodes;
        public final int storedKeys;
        public final Map<Integer, Integer> bucketSizes;
        
        public NodeStats(String nodeId, int port, int knownNodes, int storedKeys, Map<Integer, Integer> bucketSizes) {
            this.nodeId = nodeId;
            this.port = port;
            this.knownNodes = knownNodes;
            this.storedKeys = storedKeys;
            this.bucketSizes = bucketSizes;
        }
        
        @Override
        public String toString() {
            return String.format("NodeStats{id=%s, port=%d, knownNodes=%d, storedKeys=%d, buckets=%d}", 
                               nodeId.substring(0, 8) + "...", port, knownNodes, storedKeys, bucketSizes.size());
        }
    }
    
    // Геттеры для интеграции с мониторингом
    
    public KademliaId getNodeId() {
        return nodeId;
    }
    
    public int getPort() {
        return port;
    }
    
    public XorTreeRoutingTable getRoutingTable() {
        return routingTable;
    }
    
    public Map<String, String> getLocalStorage() {
        return localStorage;
    }
    
    public DHTMetricsAgent getMetricsAgent() {
        return metricsAgent;
    }
}

