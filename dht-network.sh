#!/bin/bash

# DHT Network Management Script
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DHT —Å–µ—Ç—å—é –∏–∑ 6 —É–∑–ª–æ–≤ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${PURPLE}================================${NC}"
    echo -e "${PURPLE}$1${NC}"
    echo -e "${PURPLE}================================${NC}"
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
build_project() {
    print_status "–°–±–æ—Ä–∫–∞ Java –ø—Ä–æ–µ–∫—Ç–∞..."
    
    if [ -f "./gradlew" ]; then
        ./gradlew build -x test
        print_success "Java –ø—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω"
    else
        print_warning "Gradle wrapper –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É Java"
    fi
}

# –ó–∞–ø—É—Å–∫ DHT —Å–µ—Ç–∏
start_network() {
    print_header "üöÄ –ó–ê–ü–£–°–ö DHT –°–ï–¢–ò"
    
    check_dependencies
    build_project
    
    print_status "–ó–∞–ø—É—Å–∫ DHT —É–∑–ª–æ–≤..."
    docker-compose up -d dht-bootstrap dht-node-2 dht-node-3 dht-node-4 dht-node-5 dht-node-6 dht-monitor
    
    print_status "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —É–∑–ª–æ–≤..."
    sleep 10
    
    print_success "DHT —Å–µ—Ç—å –∑–∞–ø—É—â–µ–Ω–∞!"
    print_status "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "  üåê –í–µ–±-–¥–∞—à–±–æ—Ä–¥: http://localhost:3000"
    echo "  üîß DHT —É–∑–ª—ã: http://localhost:8080-8085"
    echo "  üìä API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8080/api/docs"
}

# –ó–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
start_with_monitoring() {
    print_header "üöÄ –ó–ê–ü–£–°–ö DHT –°–ï–¢–ò –° –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú"
    
    check_dependencies
    build_project
    
    print_status "–ó–∞–ø—É—Å–∫ DHT —É–∑–ª–æ–≤ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º..."
    docker-compose --profile monitoring up -d
    
    print_status "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 15
    
    print_success "DHT —Å–µ—Ç—å —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∑–∞–ø—É—â–µ–Ω–∞!"
    print_status "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "  üåê –í–µ–±-–¥–∞—à–±–æ—Ä–¥: http://localhost:3000"
    echo "  üîß DHT —É–∑–ª—ã: http://localhost:8080-8085"
    echo "  üìä Prometheus: http://localhost:9090"
    echo "  üìà Grafana: http://localhost:3001 (admin/admin)"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ç–∏
stop_network() {
    print_header "üõë –û–°–¢–ê–ù–û–í–ö–ê DHT –°–ï–¢–ò"
    
    print_status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose down
    
    print_success "DHT —Å–µ—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    print_header "üìä –°–¢–ê–¢–£–° DHT –°–ï–¢–ò"
    
    print_status "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose ps
    
    echo ""
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —É–∑–ª–æ–≤:"
    
    nodes=("8080" "8081" "8082" "8083" "8084" "8085")
    healthy_nodes=0
    
    for port in "${nodes[@]}"; do
        if curl -s -f "http://localhost:$port/api/health" > /dev/null 2>&1; then
            echo -e "  ‚úÖ –£–∑–µ–ª –Ω–∞ –ø–æ—Ä—Ç—É $port: ${GREEN}–ó–î–û–†–û–í${NC}"
            ((healthy_nodes++))
        else
            echo -e "  ‚ùå –£–∑–µ–ª –Ω–∞ –ø–æ—Ä—Ç—É $port: ${RED}–ù–ï–î–û–°–¢–£–ü–ï–ù${NC}"
        fi
    done
    
    echo ""
    if [ $healthy_nodes -eq 6 ]; then
        print_success "–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏: $healthy_nodes/6 —É–∑–ª–æ–≤ –∑–¥–æ—Ä–æ–≤—ã - –í–°–Ø –°–ï–¢–¨ –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û! üéâ"
    elif [ $healthy_nodes -ge 3 ]; then
        print_warning "–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏: $healthy_nodes/6 —É–∑–ª–æ–≤ –∑–¥–æ—Ä–æ–≤—ã - —Å–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"
    else
        print_error "–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏: $healthy_nodes/6 —É–∑–ª–æ–≤ –∑–¥–æ—Ä–æ–≤—ã - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ!"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏
test_network() {
    print_header "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DHT –°–ï–¢–ò"
    
    print_status "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π..."
    
    # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    print_status "–¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."
    if curl -s -X PUT "http://localhost:8080/api/store/test-key" \
        -H "Content-Type: application/json" \
        -d '{"value": "test-value", "timestamp": "'$(date -Iseconds)'"}' > /dev/null; then
        print_success "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
    else
        print_error "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
        return 1
    fi
    
    sleep 2
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print_status "–¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥—Ä—É–≥–æ–º —É–∑–ª–µ..."
    if result=$(curl -s "http://localhost:8081/api/find/test-key"); then
        if echo "$result" | grep -q "test-value"; then
            print_success "‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–º —É–∑–ª–µ"
        else
            print_warning "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ —Ä–µ–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã)"
        fi
    else
        print_error "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
        return 1
    fi
    
    # –¢–µ—Å—Ç —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏
    print_status "–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏..."
    found_count=0
    for port in 8080 8081 8082 8083 8084 8085; do
        if curl -s "http://localhost:$port/api/find/test-key" | grep -q "test-value"; then
            ((found_count++))
        fi
    done
    
    if [ $found_count -ge 3 ]; then
        print_success "‚úÖ –¢–µ—Å—Ç —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ $found_count —É–∑–ª–∞—Ö"
    else
        print_warning "‚ö†Ô∏è –†–µ–ø–ª–∏–∫–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è: –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ $found_count —É–∑–ª–∞—Ö"
    fi
    
    print_success "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
monitor_network() {
    print_header "üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì DHT –°–ï–¢–ò"
    
    print_status "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏..."
    print_status "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    
    while true; do
        clear
        echo -e "${PURPLE}DHT Network Monitor - $(date)${NC}"
        echo "================================"
        
        # –°—Ç–∞—Ç—É—Å —É–∑–ª–æ–≤
        echo -e "${CYAN}–°—Ç–∞—Ç—É—Å —É–∑–ª–æ–≤:${NC}"
        for port in 8080 8081 8082 8083 8084 8085; do
            if curl -s -f "http://localhost:$port/api/health" > /dev/null 2>&1; then
                echo -e "  ‚úÖ –£–∑–µ–ª $port: ${GREEN}–û–ù–õ–ê–ô–ù${NC}"
            else
                echo -e "  ‚ùå –£–∑–µ–ª $port: ${RED}–û–§–õ–ê–ô–ù${NC}"
            fi
        done
        
        echo ""
        echo -e "${CYAN}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏:${NC}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —É–∑–ª–∞
        for port in 8080 8081 8082 8083 8084 8085; do
            if stats=$(curl -s "http://localhost:$port/api/stats" 2>/dev/null); then
                echo "  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —É–∑–ª–∞ $port:"
                echo "$stats" | jq -r '
                    "    –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: " + (.totalKeys // "N/A" | tostring) + 
                    "\n    –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: " + (.activeConnections // "N/A" | tostring) +
                    "\n    –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: " + (.uptime // "N/A" | tostring)
                ' 2>/dev/null || echo "    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                break
            fi
        done
        
        echo ""
        echo -e "${CYAN}–†–µ—Å—É—Ä—Å—ã Docker:${NC}"
        docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" | grep dht
        
        sleep 5
    done
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
view_logs() {
    print_header "üìã –õ–û–ì–ò DHT –°–ï–¢–ò"
    
    if [ -n "$1" ]; then
        print_status "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $1"
        docker-compose logs -f "$1"
    else
        print_status "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤—Å–µ—Ö DHT —É–∑–ª–æ–≤:"
        docker-compose logs -f dht-bootstrap dht-node-2 dht-node-3 dht-node-4 dht-node-5 dht-node-6
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
cleanup() {
    print_header "üßπ –û–ß–ò–°–¢–ö–ê –°–ò–°–¢–ï–ú–´"
    
    print_status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose down -v
    
    print_status "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ DHT..."
    docker rmi $(docker images | grep dht | awk '{print $3}') 2>/dev/null || true
    
    print_status "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ Docker..."
    docker system prune -f
    
    print_success "–°–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞"
}

# –°–ø—Ä–∞–≤–∫–∞
show_help() {
    print_header "üìñ –°–ü–†–ê–í–ö–ê –ü–û –£–ü–†–ê–í–õ–ï–ù–ò–Æ DHT –°–ï–¢–¨–Æ"
    
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  start              –ó–∞–ø—É—Å—Ç–∏—Ç—å DHT —Å–µ—Ç—å (6 —É–∑–ª–æ–≤ + –≤–µ–±-–¥–∞—à–±–æ—Ä–¥)"
    echo "  start-monitoring   –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–æ–ª–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º (+ Prometheus + Grafana)"
    echo "  stop               –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å DHT —Å–µ—Ç—å"
    echo "  status             –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏"
    echo "  test               –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–µ—Ç–∏"
    echo "  monitor            –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  logs [container]   –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ (–≤—Å–µ—Ö –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)"
    echo "  cleanup            –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo "  help               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 start                    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–∞–∑–æ–≤—É—é —Å–µ—Ç—å"
    echo "  $0 start-monitoring         # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"
    echo "  $0 logs dht-bootstrap       # –õ–æ–≥–∏ bootstrap —É–∑–ª–∞"
    echo "  $0 test                     # –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å"
    echo ""
    echo "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:"
    echo "  üåê –î–∞—à–±–æ—Ä–¥:     http://localhost:3000"
    echo "  üìä Prometheus:  http://localhost:9090"
    echo "  üìà Grafana:     http://localhost:3001 (admin/admin)"
    echo "  üîß DHT API:     http://localhost:8080-8085"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-help}" in
    "start")
        start_network
        ;;
    "start-monitoring")
        start_with_monitoring
        ;;
    "stop")
        stop_network
        ;;
    "status")
        check_status
        ;;
    "test")
        test_network
        ;;
    "monitor")
        monitor_network
        ;;
    "logs")
        view_logs "$2"
        ;;
    "cleanup")
        cleanup
        ;;
    "help"|*)
        show_help
        ;;
esac

