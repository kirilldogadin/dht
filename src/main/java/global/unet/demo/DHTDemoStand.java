package global.unet.demo;

import global.unet.network.SimpleDHTNode;
import global.unet.network.ScalableDHTNode;
import global.unet.domain.structures.NodeInfo;

import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–µ–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DHT —Å–∏—Å—Ç–µ–º—ã
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–∞–∑–æ–≤—ã—Ö –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */
public class DHTDemoStand {
    private static final Logger logger = Logger.getLogger(DHTDemoStand.class.getName());
    
    private final List<SimpleDHTNode> simpleNodes;
    private final List<ScalableDHTNode> scalableNodes;
    private final Random random;
    
    public DHTDemoStand() {
        this.simpleNodes = new ArrayList<>();
        this.scalableNodes = new ArrayList<>();
        this.random = new Random();
    }
    
    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
     */
    public static void main(String[] args) {
        DHTDemoStand demo = new DHTDemoStand();
        
        System.out.println("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ DHT —Å–∏—Å—Ç–µ–º—ã");
        System.out.println("=" * 60);
        
        try {
            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π DHT —Å–µ—Ç–∏
            demo.demonstrateBasicDHT();
            
            Thread.sleep(2000);
            
            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–π DHT —Å–µ—Ç–∏
            demo.demonstrateScalableDHT();
            
            Thread.sleep(2000);
            
            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
            demo.demonstrateFaultTolerance();
            
            Thread.sleep(2000);
            
            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            demo.demonstratePerformance();
            
        } catch (Exception e) {
            logger.severe("–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
        } finally {
            demo.cleanup();
        }
        
        System.out.println("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π DHT —Å–µ—Ç–∏
     */
    public void demonstrateBasicDHT() {
        System.out.println("\nüìä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–ê–ó–û–í–û–ô DHT –°–ï–¢–ò");
        System.out.println("-" * 40);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ 5 –ø—Ä–æ—Å—Ç—ã—Ö —É–∑–ª–æ–≤
        System.out.println("–°–æ–∑–¥–∞–Ω–∏–µ 5 DHT —É–∑–ª–æ–≤...");
        for (int i = 0; i < 5; i++) {
            SimpleDHTNode node = new SimpleDHTNode(8080 + i);
            node.start();
            simpleNodes.add(node);
            System.out.println("‚úÖ –£–∑–µ–ª " + (i + 1) + " –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É " + (8080 + i));
        }
        
        // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∑–ª–æ–≤ –≤ —Å–µ—Ç—å
        System.out.println("\n–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∑–ª–æ–≤ –≤ —Å–µ—Ç—å...");
        connectSimpleNodes();
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        System.out.println("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:");
        testBasicOperations();
        
        // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        System.out.println("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑–æ–≤–æ–π —Å–µ—Ç–∏:");
        printSimpleNodesStatistics();
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–π DHT —Å–µ—Ç–∏
     */
    public void demonstrateScalableDHT() {
        System.out.println("\nüöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–ô DHT –°–ï–¢–ò");
        System.out.println("-" * 45);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ 3 –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö —É–∑–ª–æ–≤
        System.out.println("–°–æ–∑–¥–∞–Ω–∏–µ 3 –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö DHT —É–∑–ª–æ–≤...");
        for (int i = 0; i < 3; i++) {
            ScalableDHTNode node = new ScalableDHTNode(9080 + i);
            node.start();
            scalableNodes.add(node);
            System.out.println("‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π —É–∑–µ–ª " + (i + 1) + " –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É " + (9080 + i));
        }
        
        // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∑–ª–æ–≤
        System.out.println("\n–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö —É–∑–ª–æ–≤...");
        connectScalableNodes();
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        System.out.println("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:");
        testAdvancedOperations();
        
        // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        System.out.println("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–π —Å–µ—Ç–∏:");
        printScalableNodesStatistics();
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
     */
    public void demonstrateFaultTolerance() {
        System.out.println("\nüõ°Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–¢–ö–ê–ó–û–£–°–¢–û–ô–ß–ò–í–û–°–¢–ò");
        System.out.println("-" * 35);
        
        if (scalableNodes.size() < 3) {
            System.out.println("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–∑–ª–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏");
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        System.out.println("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
        ScalableDHTNode firstNode = scalableNodes.get(0);
        for (int i = 0; i < 10; i++) {
            String key = "fault-test-" + i;
            String value = "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ " + i;
            firstNode.store(key, value);
        }
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∫–∞–∑–∞ —É–∑–ª–∞
        System.out.println("\n‚ö†Ô∏è –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∫–∞–∑–∞ —É–∑–ª–∞...");
        ScalableDHTNode failedNode = scalableNodes.get(1);
        System.out.println("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∑–µ–ª " + failedNode.getNodeId());
        failedNode.stop();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        System.out.println("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞:");
        ScalableDHTNode workingNode = scalableNodes.get(2);
        int foundData = 0;
        for (int i = 0; i < 10; i++) {
            String key = "fault-test-" + i;
            Object result = workingNode.find(key);
            if (result != null) {
                foundData++;
                System.out.println("‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: " + key);
            } else {
                System.out.println("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã: " + key);
            }
        }
        
        System.out.println(String.format("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: %d –∏–∑ 10 –∑–∞–ø–∏—Å–µ–π —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å (%.1f%%)", 
            foundData, (double) foundData / 10 * 100));
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∑–ª–∞
        System.out.println("\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∑–ª–∞...");
        ScalableDHTNode newNode = new ScalableDHTNode(failedNode.getPort());
        newNode.start();
        scalableNodes.set(1, newNode);
        System.out.println("‚úÖ –£–∑–µ–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    public void demonstratePerformance() {
        System.out.println("\n‚ö° –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò");
        System.out.println("-" * 35);
        
        if (scalableNodes.isEmpty()) {
            System.out.println("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–∑–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
            return;
        }
        
        ScalableDHTNode testNode = scalableNodes.get(0);
        
        // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
        System.out.println("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏...");
        long startTime = System.currentTimeMillis();
        int writeOperations = 100;
        
        for (int i = 0; i < writeOperations; i++) {
            String key = "perf-test-" + i;
            String value = "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ " + i;
            testNode.store(key, value);
        }
        
        long writeTime = System.currentTimeMillis() - startTime;
        double writeOpsPerSec = (double) writeOperations / writeTime * 1000;
        
        System.out.println(String.format("üìù –ó–∞–ø–∏—Å–∞–Ω–æ %d –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ %d –º—Å (%.1f ops/sec)", 
            writeOperations, writeTime, writeOpsPerSec));
        
        // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è
        System.out.println("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è...");
        startTime = System.currentTimeMillis();
        int readOperations = 100;
        int foundOperations = 0;
        
        for (int i = 0; i < readOperations; i++) {
            String key = "perf-test-" + i;
            Object result = testNode.find(key);
            if (result != null) {
                foundOperations++;
            }
        }
        
        long readTime = System.currentTimeMillis() - startTime;
        double readOpsPerSec = (double) readOperations / readTime * 1000;
        
        System.out.println(String.format("üîç –ü—Ä–æ—á–∏—Ç–∞–Ω–æ %d –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ %d –º—Å (%.1f ops/sec)", 
            readOperations, readTime, readOpsPerSec));
        System.out.println(String.format("‚úÖ –ù–∞–π–¥–µ–Ω–æ %d –∏–∑ %d –∑–∞–ø–∏—Å–µ–π (%.1f%%)", 
            foundOperations, readOperations, (double) foundOperations / readOperations * 100));
    }
    
    /**
     * –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —É–∑–ª–æ–≤ –≤ —Å–µ—Ç—å
     */
    private void connectSimpleNodes() {
        for (int i = 1; i < simpleNodes.size(); i++) {
            SimpleDHTNode currentNode = simpleNodes.get(i);
            SimpleDHTNode previousNode = simpleNodes.get(i - 1);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —É–∑–ª–µ
            currentNode.addNode(previousNode.getNodeInfo());
            previousNode.addNode(currentNode.getNodeInfo());
        }
        
        // –°–æ–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–∑–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª—å—Ü–∞
        if (simpleNodes.size() > 2) {
            SimpleDHTNode firstNode = simpleNodes.get(0);
            SimpleDHTNode lastNode = simpleNodes.get(simpleNodes.size() - 1);
            firstNode.addNode(lastNode.getNodeInfo());
            lastNode.addNode(firstNode.getNodeInfo());
        }
    }
    
    /**
     * –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö —É–∑–ª–æ–≤ –≤ —Å–µ—Ç—å
     */
    private void connectScalableNodes() {
        for (int i = 1; i < scalableNodes.size(); i++) {
            ScalableDHTNode currentNode = scalableNodes.get(i);
            ScalableDHTNode previousNode = scalableNodes.get(i - 1);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —É–∑–ª–µ
            currentNode.addNode(previousNode.getNodeInfo());
            previousNode.addNode(currentNode.getNodeInfo());
        }
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    private void testBasicOperations() {
        if (simpleNodes.isEmpty()) return;
        
        SimpleDHTNode testNode = simpleNodes.get(0);
        
        // –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        String[] testKeys = {"user:123", "session:abc", "config:main"};
        String[] testValues = {"John Doe", "active_session_data", "main_configuration"};
        
        for (int i = 0; i < testKeys.length; i++) {
            boolean success = testNode.store(testKeys[i], testValues[i]);
            System.out.println(String.format("  %s –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ '%s': %s", 
                success ? "‚úÖ" : "‚ùå", testKeys[i], success ? "—É—Å–ø–µ—à–Ω–æ" : "–æ—à–∏–±–∫–∞"));
        }
        
        // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        System.out.println("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞:");
        for (String key : testKeys) {
            Object result = testNode.find(key);
            System.out.println(String.format("  %s –ü–æ–∏—Å–∫ '%s': %s", 
                result != null ? "‚úÖ" : "‚ùå", key, result != null ? "–Ω–∞–π–¥–µ–Ω–æ" : "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));
        }
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    private void testAdvancedOperations() {
        if (scalableNodes.isEmpty()) return;
        
        ScalableDHTNode testNode = scalableNodes.get(0);
        
        // –¢–µ—Å—Ç —Å —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–µ–π
        System.out.println("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:");
        String key = "replicated:data";
        String value = "–î–∞–Ω–Ω—ã–µ —Å —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–µ–π";
        
        boolean success = testNode.store(key, value);
        System.out.println(String.format("  %s –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–µ–π: %s", 
            success ? "‚úÖ" : "‚ùå", success ? "—É—Å–ø–µ—à–Ω–æ" : "–æ—à–∏–±–∫–∞"));
        
        // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É–∑–ª–∞—Ö
        System.out.println("\n–ü–æ–∏—Å–∫ —Ä–µ–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É–∑–ª–∞—Ö:");
        for (int i = 0; i < scalableNodes.size(); i++) {
            Object result = scalableNodes.get(i).find(key);
            System.out.println(String.format("  %s –£–∑–µ–ª %d: %s", 
                result != null ? "‚úÖ" : "‚ùå", i + 1, result != null ? "–Ω–∞–π–¥–µ–Ω–æ" : "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));
        }
    }
    
    /**
     * –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Å—Ç—ã—Ö —É–∑–ª–æ–≤
     */
    private void printSimpleNodesStatistics() {
        for (int i = 0; i < simpleNodes.size(); i++) {
            SimpleDHTNode node = simpleNodes.get(i);
            System.out.println(String.format("  –£–∑–µ–ª %d: –ó–∞–ø—Ä–æ—Å–æ–≤: %d, –£—Å–ø–µ—à–Ω—ã—Ö: %d, –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %d —Å–µ–∫", 
                i + 1, node.getTotalRequests(), node.getSuccessfulRequests(), node.getUptime() / 1000));
        }
    }
    
    /**
     * –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö —É–∑–ª–æ–≤
     */
    private void printScalableNodesStatistics() {
        for (int i = 0; i < scalableNodes.size(); i++) {
            ScalableDHTNode node = scalableNodes.get(i);
            System.out.println(String.format("  –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π —É–∑–µ–ª %d: ID: %s, –ü–æ—Ä—Ç: %d", 
                i + 1, node.getNodeId().toString().substring(0, 8) + "...", node.getPort()));
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    private void cleanup() {
        System.out.println("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...");
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö —É–∑–ª–æ–≤
        for (SimpleDHTNode node : simpleNodes) {
            try {
                node.stop();
            } catch (Exception e) {
                logger.warning("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —É–∑–ª–∞: " + e.getMessage());
            }
        }
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö —É–∑–ª–æ–≤
        for (ScalableDHTNode node : scalableNodes) {
            try {
                node.stop();
            } catch (Exception e) {
                logger.warning("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–≥–æ —É–∑–ª–∞: " + e.getMessage());
            }
        }
        
        simpleNodes.clear();
        scalableNodes.clear();
        
        System.out.println("‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã");
    }
}

