import React, { useState, useEffect } from 'react';
import './App.css';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';
import { Badge } from './components/ui/badge';
import { Button } from './components/ui/button';
import { 
  Activity, 
  Network, 
  Server, 
  BarChart3, 
  Clock, 
  Users, 
  Zap, 
  AlertTriangle,
  CheckCircle,
  RefreshCw,
  Settings,
  TrendingUp,
  Globe
} from 'lucide-react';
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  ScatterChart,
  Scatter
} from 'recharts';

// Конфигурация API
const API_BASE_URL = 'http://localhost:8080';

function App() {
  const [networkStats, setNetworkStats] = useState(null);
  const [nodes, setNodes] = useState([]);
  const [topology, setTopology] = useState(null);
  const [aggregatedMetrics, setAggregatedMetrics] = useState(null);
  const [metricsHistory, setMetricsHistory] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState(null);
  const [autoRefresh, setAutoRefresh] = useState(true);

  // Функция для получения данных с API
  const fetchData = async () => {
    try {
      setIsLoading(true);
      
      // Параллельные запросы к API
      const [statsRes, nodesRes, topologyRes, aggregatedRes] = await Promise.all([
        fetch(`${API_BASE_URL}/api/stats`).catch(() => ({ ok: false })),
        fetch(`${API_BASE_URL}/api/nodes`).catch(() => ({ ok: false })),
        fetch(`${API_BASE_URL}/api/topology`).catch(() => ({ ok: false })),
        fetch(`${API_BASE_URL}/api/aggregated`).catch(() => ({ ok: false }))
      ]);

      if (statsRes.ok) {
        const stats = await statsRes.json();
        setNetworkStats(stats);
      }

      if (nodesRes.ok) {
        const nodesData = await nodesRes.json();
        setNodes(nodesData.nodes || []);
      }

      if (topologyRes.ok) {
        const topologyData = await topologyRes.json();
        setTopology(topologyData);
      }

      if (aggregatedRes.ok) {
        const aggregated = await aggregatedRes.json();
        setAggregatedMetrics(aggregated);
      }

      setLastUpdate(new Date());
      
    } catch (error) {
      console.error('Error fetching data:', error);
      // Генерируем демо-данные при ошибке
      generateDemoData();
    } finally {
      setIsLoading(false);
    }
  };

  // Генерация демо-данных для демонстрации
  const generateDemoData = () => {
    const demoStats = {
      total_nodes: 12,
      active_nodes: 10,
      total_metrics_received: 15420,
      server_uptime: 3600000,
      avg_response_time: 0.045,
      success_rate: 96.8
    };

    const demoNodes = Array.from({ length: 10 }, (_, i) => `node-${i + 1}`);

    const demoTopology = {
      nodes: {
        active: demoNodes.map(id => ({
          node_id: id,
          last_seen: Date.now() - Math.random() * 10000,
          active: true
        })),
        inactive: []
      },
      edges: [
        { from: 'node-1', to: 'node-2', active: true },
        { from: 'node-2', to: 'node-3', active: true },
        { from: 'node-3', to: 'node-4', active: true },
        { from: 'node-1', to: 'node-5', active: true }
      ],
      stats: {
        total_nodes: 10,
        active_nodes: 10,
        total_connections: 15,
        network_connected: true,
        network_diameter: 4,
        average_degree: 3.2
      }
    };

    const demoAggregated = {
      metrics: {
        'dht_rpc_requests_total': {
          count: 10,
          sum: 45000,
          mean: 4500,
          min: 3200,
          max: 6800,
          median: 4400,
          p95: 6200,
          p99: 6700
        },
        'dht_rpc_response_time_ms': {
          count: 10,
          sum: 450,
          mean: 45,
          min: 32,
          max: 68,
          median: 44,
          p95: 62,
          p99: 67
        }
      },
      total_nodes: 10,
      timestamp: Date.now()
    };

    setNetworkStats(demoStats);
    setNodes(demoNodes);
    setTopology(demoTopology);
    setAggregatedMetrics(demoAggregated);
    setLastUpdate(new Date());
  };

  // Автообновление данных
  useEffect(() => {
    fetchData();
    
    if (autoRefresh) {
      const interval = setInterval(fetchData, 5000); // Обновление каждые 5 секунд
      return () => clearInterval(interval);
    }
  }, [autoRefresh]);

  // Генерация данных для графиков
  const generateTimeSeriesData = () => {
    const now = Date.now();
    return Array.from({ length: 20 }, (_, i) => ({
      time: new Date(now - (19 - i) * 30000).toLocaleTimeString(),
      rpc_requests: Math.floor(Math.random() * 1000) + 3000,
      response_time: Math.random() * 20 + 30,
      success_rate: Math.random() * 5 + 95,
      active_nodes: Math.floor(Math.random() * 3) + 8
    }));
  };

  const timeSeriesData = generateTimeSeriesData();

  // Данные для круговой диаграммы типов метрик
  const metricsTypeData = [
    { name: 'Counter', value: 45, color: '#8884d8' },
    { name: 'Gauge', value: 30, color: '#82ca9d' },
    { name: 'Histogram', value: 25, color: '#ffc658' }
  ];

  // Данные для диаграммы производительности узлов
  const nodePerformanceData = nodes.slice(0, 8).map((nodeId, index) => ({
    node: nodeId,
    cpu: Math.random() * 40 + 20,
    memory: Math.random() * 30 + 40,
    network: Math.random() * 50 + 30,
    rpc_rate: Math.random() * 1000 + 2000
  }));

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800">
      {/* Header */}
      <header className="bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm border-b border-slate-200 dark:border-slate-700 sticky top-0 z-50">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <Network className="h-8 w-8 text-blue-600" />
                <h1 className="text-2xl font-bold text-slate-900 dark:text-white">
                  DHT Network Monitor
                </h1>
              </div>
              {networkStats && (
                <Badge variant={networkStats.active_nodes > 5 ? "default" : "destructive"}>
                  {networkStats.active_nodes} Active Nodes
                </Badge>
              )}
            </div>
            
            <div className="flex items-center space-x-4">
              {lastUpdate && (
                <div className="text-sm text-slate-600 dark:text-slate-400">
                  Last update: {lastUpdate.toLocaleTimeString()}
                </div>
              )}
              <Button
                variant="outline"
                size="sm"
                onClick={() => setAutoRefresh(!autoRefresh)}
                className={autoRefresh ? "bg-green-50 border-green-200" : ""}
              >
                <RefreshCw className={`h-4 w-4 mr-2 ${autoRefresh ? 'animate-spin' : ''}`} />
                Auto Refresh
              </Button>
              <Button variant="outline" size="sm" onClick={fetchData} disabled={isLoading}>
                <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
                Refresh
              </Button>
            </div>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-6 py-8">
        {/* Overview Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card className="bg-gradient-to-r from-blue-500 to-blue-600 text-white border-0">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium opacity-90">Total Nodes</CardTitle>
              <Server className="h-4 w-4 opacity-90" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {networkStats?.total_nodes || 0}
              </div>
              <p className="text-xs opacity-90">
                {networkStats?.active_nodes || 0} active
              </p>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-r from-green-500 to-green-600 text-white border-0">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium opacity-90">Success Rate</CardTitle>
              <CheckCircle className="h-4 w-4 opacity-90" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {networkStats?.success_rate?.toFixed(1) || 0}%
              </div>
              <p className="text-xs opacity-90">
                RPC operations
              </p>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-r from-purple-500 to-purple-600 text-white border-0">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium opacity-90">Response Time</CardTitle>
              <Zap className="h-4 w-4 opacity-90" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {networkStats?.avg_response_time?.toFixed(1) || 0}ms
              </div>
              <p className="text-xs opacity-90">
                Average latency
              </p>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-r from-orange-500 to-orange-600 text-white border-0">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium opacity-90">Total Metrics</CardTitle>
              <BarChart3 className="h-4 w-4 opacity-90" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {networkStats?.total_metrics_received?.toLocaleString() || 0}
              </div>
              <p className="text-xs opacity-90">
                Collected
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Main Dashboard */}
        <Tabs defaultValue="overview" className="space-y-6">
          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="performance">Performance</TabsTrigger>
            <TabsTrigger value="topology">Network Topology</TabsTrigger>
            <TabsTrigger value="nodes">Node Details</TabsTrigger>
            <TabsTrigger value="metrics">Metrics Analysis</TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* RPC Requests Timeline */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Activity className="h-5 w-5" />
                    <span>RPC Requests Over Time</span>
                  </CardTitle>
                  <CardDescription>
                    Real-time monitoring of RPC request volume
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={300}>
                    <AreaChart data={timeSeriesData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="time" />
                      <YAxis />
                      <Tooltip />
                      <Area 
                        type="monotone" 
                        dataKey="rpc_requests" 
                        stroke="#8884d8" 
                        fill="#8884d8" 
                        fillOpacity={0.3}
                      />
                    </AreaChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              {/* Response Time Chart */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Clock className="h-5 w-5" />
                    <span>Response Time Trends</span>
                  </CardTitle>
                  <CardDescription>
                    Average response time across all nodes
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={300}>
                    <LineChart data={timeSeriesData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="time" />
                      <YAxis />
                      <Tooltip />
                      <Line 
                        type="monotone" 
                        dataKey="response_time" 
                        stroke="#82ca9d" 
                        strokeWidth={2}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Success Rate */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <TrendingUp className="h-5 w-5" />
                    <span>Success Rate</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={200}>
                    <LineChart data={timeSeriesData}>
                      <XAxis dataKey="time" hide />
                      <YAxis domain={[90, 100]} hide />
                      <Tooltip />
                      <Line 
                        type="monotone" 
                        dataKey="success_rate" 
                        stroke="#10b981" 
                        strokeWidth={3}
                        dot={false}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              {/* Active Nodes */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Users className="h-5 w-5" />
                    <span>Active Nodes</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={200}>
                    <BarChart data={timeSeriesData.slice(-10)}>
                      <XAxis dataKey="time" hide />
                      <YAxis hide />
                      <Tooltip />
                      <Bar dataKey="active_nodes" fill="#3b82f6" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              {/* Metrics Distribution */}
              <Card>
                <CardHeader>
                  <CardTitle>Metrics Types</CardTitle>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={200}>
                    <PieChart>
                      <Pie
                        data={metricsTypeData}
                        cx="50%"
                        cy="50%"
                        innerRadius={40}
                        outerRadius={80}
                        paddingAngle={5}
                        dataKey="value"
                      >
                        {metricsTypeData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip />
                    </PieChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Performance Tab */}
          <TabsContent value="performance" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Node Performance Comparison</CardTitle>
                  <CardDescription>
                    CPU, Memory, and Network utilization by node
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={400}>
                    <BarChart data={nodePerformanceData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="node" />
                      <YAxis />
                      <Tooltip />
                      <Legend />
                      <Bar dataKey="cpu" fill="#8884d8" name="CPU %" />
                      <Bar dataKey="memory" fill="#82ca9d" name="Memory %" />
                      <Bar dataKey="network" fill="#ffc658" name="Network %" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>RPC Rate vs Performance</CardTitle>
                  <CardDescription>
                    Correlation between RPC rate and resource usage
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={400}>
                    <ScatterChart data={nodePerformanceData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="rpc_rate" name="RPC Rate" />
                      <YAxis dataKey="cpu" name="CPU %" />
                      <Tooltip cursor={{ strokeDasharray: '3 3' }} />
                      <Scatter dataKey="cpu" fill="#8884d8" />
                    </ScatterChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Network Topology Tab */}
          <TabsContent value="topology" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <Card className="lg:col-span-2">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Globe className="h-5 w-5" />
                    <span>Network Topology Visualization</span>
                  </CardTitle>
                  <CardDescription>
                    Interactive view of DHT network structure
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-96 bg-slate-50 dark:bg-slate-800 rounded-lg flex items-center justify-center">
                    <div className="text-center">
                      <Network className="h-16 w-16 text-slate-400 mx-auto mb-4" />
                      <p className="text-slate-600 dark:text-slate-400">
                        Network topology visualization will be rendered here
                      </p>
                      <p className="text-sm text-slate-500 dark:text-slate-500 mt-2">
                        {topology?.stats?.total_nodes || 0} nodes, {topology?.edges?.length || 0} connections
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Network Statistics</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {topology?.stats && (
                    <>
                      <div className="flex justify-between">
                        <span className="text-sm text-slate-600 dark:text-slate-400">Total Nodes</span>
                        <span className="font-medium">{topology.stats.total_nodes}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-slate-600 dark:text-slate-400">Active Nodes</span>
                        <span className="font-medium">{topology.stats.active_nodes}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-slate-600 dark:text-slate-400">Connections</span>
                        <span className="font-medium">{topology.stats.total_connections}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-slate-600 dark:text-slate-400">Network Diameter</span>
                        <span className="font-medium">{topology.stats.network_diameter}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-slate-600 dark:text-slate-400">Average Degree</span>
                        <span className="font-medium">{topology.stats.average_degree?.toFixed(1)}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-slate-600 dark:text-slate-400">Connected</span>
                        <Badge variant={topology.stats.network_connected ? "default" : "destructive"}>
                          {topology.stats.network_connected ? "Yes" : "No"}
                        </Badge>
                      </div>
                    </>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Node Details Tab */}
          <TabsContent value="nodes" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Node Status Overview</CardTitle>
                <CardDescription>
                  Detailed status of all DHT nodes in the network
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {nodes.map((nodeId, index) => (
                    <Card key={nodeId} className="border-l-4 border-l-green-500">
                      <CardHeader className="pb-2">
                        <div className="flex items-center justify-between">
                          <CardTitle className="text-sm">{nodeId}</CardTitle>
                          <Badge variant="default" className="bg-green-100 text-green-800">
                            Active
                          </Badge>
                        </div>
                      </CardHeader>
                      <CardContent className="space-y-2">
                        <div className="text-xs text-slate-600 dark:text-slate-400">
                          Last seen: {new Date(Date.now() - Math.random() * 10000).toLocaleTimeString()}
                        </div>
                        <div className="grid grid-cols-2 gap-2 text-xs">
                          <div>
                            <span className="text-slate-500">RPC:</span>
                            <span className="ml-1 font-medium">{Math.floor(Math.random() * 1000) + 2000}/s</span>
                          </div>
                          <div>
                            <span className="text-slate-500">Latency:</span>
                            <span className="ml-1 font-medium">{(Math.random() * 20 + 30).toFixed(1)}ms</span>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Metrics Analysis Tab */}
          <TabsContent value="metrics" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Aggregated Metrics Summary</CardTitle>
                  <CardDescription>
                    Statistical analysis of collected metrics
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {aggregatedMetrics?.metrics && (
                    <div className="space-y-4">
                      {Object.entries(aggregatedMetrics.metrics).map(([metricName, stats]) => (
                        <div key={metricName} className="border rounded-lg p-4">
                          <h4 className="font-medium mb-2">{metricName}</h4>
                          <div className="grid grid-cols-2 gap-2 text-sm">
                            <div>Mean: <span className="font-medium">{stats.mean?.toFixed(2)}</span></div>
                            <div>Median: <span className="font-medium">{stats.median?.toFixed(2)}</span></div>
                            <div>Min: <span className="font-medium">{stats.min?.toFixed(2)}</span></div>
                            <div>Max: <span className="font-medium">{stats.max?.toFixed(2)}</span></div>
                            <div>P95: <span className="font-medium">{stats.p95?.toFixed(2)}</span></div>
                            <div>P99: <span className="font-medium">{stats.p99?.toFixed(2)}</span></div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>System Health</CardTitle>
                  <CardDescription>
                    Overall system status and alerts
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex items-center space-x-3 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
                      <CheckCircle className="h-5 w-5 text-green-600" />
                      <div>
                        <div className="font-medium text-green-800 dark:text-green-200">
                          Network Healthy
                        </div>
                        <div className="text-sm text-green-600 dark:text-green-400">
                          All nodes responding normally
                        </div>
                      </div>
                    </div>

                    <div className="flex items-center space-x-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                      <Activity className="h-5 w-5 text-blue-600" />
                      <div>
                        <div className="font-medium text-blue-800 dark:text-blue-200">
                          High Activity
                        </div>
                        <div className="text-sm text-blue-600 dark:text-blue-400">
                          {networkStats?.total_metrics_received || 0} metrics collected
                        </div>
                      </div>
                    </div>

                    {networkStats?.success_rate < 95 && (
                      <div className="flex items-center space-x-3 p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
                        <AlertTriangle className="h-5 w-5 text-yellow-600" />
                        <div>
                          <div className="font-medium text-yellow-800 dark:text-yellow-200">
                            Success Rate Warning
                          </div>
                          <div className="text-sm text-yellow-600 dark:text-yellow-400">
                            Success rate below 95%
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
}

export default App;

